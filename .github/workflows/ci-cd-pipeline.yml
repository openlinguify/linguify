name: CI/CD Pipeline

on:
  push:
    branches: [ dev, develop, staging, main ]
  pull_request:
    branches: [ dev, develop, staging, main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  # Tests automatiques sur push vers develop
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop') || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db_linguify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install
          poetry add --group dev pytest-django pytest-mock flake8

      - name: Setup test environment
        run: |
          cp .env.example .env
          # Convert to Unix line endings
          sed -i 's/\r$//' .env
          # Update DB configuration for CI
          sed -i 's/DB_NAME=.*/DB_NAME=test_db_linguify/g' .env
          sed -i 's/DB_USER=.*/DB_USER=postgres/g' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=postgres/g' .env
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/g' .env
          sed -i 's/DB_PORT=.*/DB_PORT=5432/g' .env
          sed -i 's/DEBUG=.*/DEBUG=True/g' .env
          sed -i 's/SECRET_KEY=.*/SECRET_KEY=test_secret_key_for_ci_environment/g' .env
          sed -i 's/REDIS_URL=.*/REDIS_URL=redis:\/\/localhost:6379\/1/g' .env
          # Add DEV_DB variables since they don't exist in .env.example
          echo "" >> .env
          echo "# CI Database Configuration" >> .env
          echo "DEV_DB_NAME=test_db_linguify" >> .env
          echo "DEV_DB_USER=postgres" >> .env
          echo "DEV_DB_PASSWORD=postgres" >> .env
          echo "DEV_DB_HOST=localhost" >> .env
          echo "DEV_DB_PORT=5432" >> .env
          echo "TESTING=True" >> .env
          echo "TEST_MODE=True" >> .env
          echo "DJANGO_ENV=ci" >> .env
          echo "ALLOWED_HOSTS=*" >> .env
          echo "AUTH0_CLIENT_SECRET=test-secret" >> .env

      - name: Run migrations
        run: |
          set -a
          source .env
          set +a
          poetry run python manage.py migrate
        env:
          TEST_MODE: 'True'

      - name: Run All Tests
        run: |
          set -a
          source .env
          set +a
          echo "ðŸš€ Running Complete Test Suite"
          # Run tests using test discovery but exclude problematic directories
          poetry run python manage.py test \
            tests \
            apps.authentication.tests \
            apps.quizz.tests \
            apps.revision.tests \
            --verbosity=2 --keepdb --settings=core.settings_test --pattern="test_*.py"
        env:
          TEST_MODE: 'True'
          CI: 'True'
      
      - name: Backend Tests Complete
        run: |
          echo "ðŸŽ¯ Backend Tests Complete"
          echo "Note: Jobs tests moved to portal project"
        env:
          TEST_MODE: 'True'
          CI: 'True'

  # Auto-merge develop vers staging si les tests passent
  auto-merge-to-staging:
    name: Auto-merge to Staging
    needs: test
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop') && success()
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Merge develop into staging
        run: |
          git checkout staging
          git merge origin/develop --no-ff -m "Auto-merge develop into staging after successful tests"
          git push origin staging

  # Tests avant merge vers main
  test-staging:
    name: Test Staging Branch
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db_linguify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          poetry install
          poetry add --group dev pytest-django pytest-mock flake8

      - name: Setup test environment
        run: |
          cp .env.example .env
          # Convert to Unix line endings
          sed -i 's/\r$//' .env
          # Update DB configuration for CI
          sed -i 's/DB_NAME=.*/DB_NAME=test_db_linguify/g' .env
          sed -i 's/DB_USER=.*/DB_USER=postgres/g' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=postgres/g' .env
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/g' .env
          sed -i 's/DB_PORT=.*/DB_PORT=5432/g' .env
          sed -i 's/DEBUG=.*/DEBUG=True/g' .env
          sed -i 's/SECRET_KEY=.*/SECRET_KEY=test_secret_key_for_ci_environment/g' .env
          sed -i 's/REDIS_URL=.*/REDIS_URL=redis:\/\/localhost:6379\/1/g' .env
          # Add DEV_DB variables since they don't exist in .env.example
          echo "" >> .env
          echo "# CI Database Configuration" >> .env
          echo "DEV_DB_NAME=test_db_linguify" >> .env
          echo "DEV_DB_USER=postgres" >> .env
          echo "DEV_DB_PASSWORD=postgres" >> .env
          echo "DEV_DB_HOST=localhost" >> .env
          echo "DEV_DB_PORT=5432" >> .env
          echo "TESTING=True" >> .env
          echo "TEST_MODE=True" >> .env
          echo "DJANGO_ENV=ci" >> .env
          echo "ALLOWED_HOSTS=*" >> .env
          echo "AUTH0_CLIENT_SECRET=test-secret" >> .env

      - name: Run migrations
        run: |
          set -a
          source .env
          set +a
          poetry run python manage.py migrate
        env:
          TEST_MODE: 'True'

      - name: Run Complete Test Suite for Staging
        run: |
          set -a
          source .env
          set +a
          echo "ðŸ”¥ Running FULL Test Suite for Staging"
          # Run only specific test modules, excluding disabled apps
          poetry run python manage.py test \
            tests \
            apps.authentication.tests \
            apps.quizz.tests \
            apps.revision.tests \
            --verbosity=2 --keepdb --settings=core.settings_test
          echo "ðŸŽ¯ Backend Tests Complete (jobs tests in portal project)"
        env:
          TEST_MODE: 'True'
          CI: 'True'

  # Deploy vers Staging (Render)
  deploy-staging:
    name: Deploy to Staging
    needs: test-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && success()
    environment: staging
    
    steps:
      - name: Deploy to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.9
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: rnd_sTW1YJFvnzWxHWfGWdMBKtmwiZfi
          
      - name: Staging Deployment Status
        run: echo "âœ… Staging deployment triggered successfully on Render"

  # Auto-merge staging vers main si deploy staging rÃ©ussi
  auto-merge-to-main:
    name: Auto-merge to Main
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && success()
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Merge staging into main
        run: |
          git checkout main
          git merge origin/staging --no-ff -m "Auto-merge staging into main after successful staging deployment"
          git push origin main

  # Deploy vers Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to Render Production
        uses: johnbeynon/render-deploy-action@v0.0.9
        with:
          service-id: srv-d149ag49c44c73d2f27g
          api-key: rnd_LYvNUTDvyHgmiPbryBLPTUl7qyHI
          
      - name: Production Deployment Status
        run: echo "ðŸš€ Production deployment triggered successfully on Render"

  # Notification en cas d'Ã©chec
  notify-failure:
    name: Notify on Failure
    needs: [test, test-staging, deploy-staging, deploy-production]
    if: failure() && false  # TEMPORAIREMENT DÃ‰SACTIVÃ‰ - Retirer "&& false" pour rÃ©activer
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = "CI/CD Pipeline";
            const runId = "${{ github.run_id }}";
            const branch = "${{ github.ref_name }}";
            const repo = context.repo;
            const issueTitle = `ðŸš¨ CI/CD Failed: ${workflowName} on ${branch}`;
            const issueBody = `The CI/CD pipeline **${workflowName}** failed on the \`${branch}\` branch.

            **Run URL**: [View Failed Run](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})

            **Time**: ${new Date().toISOString()}

            **Possible causes:**
            - Test failures (including jobs email functionality)
            - Deployment issues
            - Environment configuration problems

            Please investigate the issue and fix the failing components.`;

            await github.rest.issues.create({
              owner: repo.owner,
              repo: repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ["bug", "CI/CD", "urgent"]
            });