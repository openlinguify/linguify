# Generated by Django 5.2.6 on 2025-09-21 01:17

from django.db import migrations


def fix_target_level_data(apps, schema_editor):
    """Convertit les valeurs target_level longues en codes de niveau valides"""
    UserLanguage = apps.get_model('language_learning', 'UserLanguage')

    # Mapping des anciennes valeurs vers les nouvelles
    level_mapping = {
        'beginner': 'A1',
        'elementary': 'A2',
        'intermediate': 'B1',
        'upper-intermediate': 'B2',
        'advanced': 'C1',
        'proficient': 'C2',
        # Garder les valeurs déjà valides
        'A1': 'A1', 'A2': 'A2', 'B1': 'B1',
        'B2': 'B2', 'C1': 'C1', 'C2': 'C2'
    }

    updated_count = 0
    for user_language in UserLanguage.objects.all():
        old_level = user_language.target_level
        new_level = level_mapping.get(old_level, 'B1')  # B1 par défaut si non trouvé

        if old_level != new_level:
            user_language.target_level = new_level
            user_language.save()
            updated_count += 1
            print(f"Mise à jour: {old_level} -> {new_level}")

    print(f"Total mis à jour: {updated_count} enregistrements")


def reverse_fix_target_level_data(apps, schema_editor):
    """Fonction de reverse - ne fait rien car on ne peut pas retrouver les anciennes valeurs"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('language_learning', '0003_courseunit_coursemodule_moduleprogress_and_more'),
    ]

    operations = [
        migrations.RunPython(fix_target_level_data, reverse_fix_target_level_data),
    ]
