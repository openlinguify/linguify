# Generated by Django 5.1.10 on 2025-09-04 23:39

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cms_teacher_id', models.PositiveIntegerField(help_text='Teacher ID from CMS', unique=True)),
                ('user_id', models.PositiveIntegerField(help_text='User ID from CMS')),
                ('full_name', models.CharField(max_length=200)),
                ('bio_en', models.TextField(blank=True)),
                ('bio_fr', models.TextField(blank=True)),
                ('bio_es', models.TextField(blank=True)),
                ('bio_nl', models.TextField(blank=True)),
                ('profile_picture_url', models.URLField(blank=True)),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=6)),
                ('years_experience', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('total_hours_taught', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('teacher_timezone', models.CharField(default='Europe/Paris', max_length=50)),
                ('available_for_individual', models.BooleanField(default=True)),
                ('max_students_per_class', models.PositiveIntegerField(default=1)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'teaching_teachers',
                'ordering': ['-average_rating', 'full_name'],
            },
        ),
        migrations.CreateModel(
            name='PrivateLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_datetime', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(180)])),
                ('timezone_used', models.CharField(default='Europe/Paris', max_length=50)),
                ('language', models.CharField(help_text='Language code being taught', max_length=10)),
                ('level', models.CharField(help_text='Student level (A1, A2, etc.)', max_length=10)),
                ('topic', models.CharField(blank=True, help_text='Lesson topic or focus', max_length=200)),
                ('student_goals', models.TextField(blank=True, help_text='What student wants to learn')),
                ('meeting_type', models.CharField(choices=[('video_call', 'Video Call'), ('phone_call', 'Phone Call'), ('in_person', 'In Person')], default='video_call', max_length=20)),
                ('meeting_url', models.URLField(blank=True)),
                ('meeting_id', models.CharField(blank=True, max_length=100)),
                ('meeting_password', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled_student', 'Cancelled by Student'), ('cancelled_teacher', 'Cancelled by Teacher'), ('no_show_student', 'Student No-Show'), ('no_show_teacher', 'Teacher No-Show')], default='pending', max_length=30)),
                ('booking_reference', models.CharField(max_length=20, unique=True)),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=6)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('payment_status', models.CharField(default='pending', max_length=20)),
                ('payment_transaction_id', models.CharField(blank=True, max_length=100)),
                ('teacher_preparation_notes', models.TextField(blank=True)),
                ('session_notes', models.TextField(blank=True)),
                ('student_feedback', models.TextField(blank=True)),
                ('teacher_feedback', models.TextField(blank=True)),
                ('booked_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='private_lessons', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_sessions', to='teaching.teacher')),
            ],
            options={
                'db_table': 'private_lessons',
                'ordering': ['-scheduled_datetime'],
            },
        ),
        migrations.CreateModel(
            name='LessonRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teaching_quality', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('punctuality', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_title', models.CharField(blank=True, max_length=200)),
                ('review_text', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='teaching.privatelesson')),
            ],
            options={
                'db_table': 'lesson_ratings',
            },
        ),
        migrations.CreateModel(
            name='TeacherAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_schedule', to='teaching.teacher')),
            ],
            options={
                'db_table': 'teacher_availability_schedule',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='TeacherLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(max_length=10)),
                ('language_name', models.CharField(max_length=100)),
                ('proficiency', models.CharField(choices=[('native', 'Native Speaker'), ('fluent', 'Fluent'), ('intermediate', 'Intermediate')], max_length=20)),
                ('can_teach', models.BooleanField(default=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_languages', to='teaching.teacher')),
            ],
            options={
                'db_table': 'teacher_teaching_languages',
            },
        ),
        migrations.CreateModel(
            name='TeacherScheduleOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('is_available', models.BooleanField(default=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_overrides', to='teaching.teacher')),
            ],
            options={
                'db_table': 'teacher_schedule_overrides',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='TeachingAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('lessons_scheduled', models.PositiveIntegerField(default=0)),
                ('lessons_completed', models.PositiveIntegerField(default=0)),
                ('lessons_cancelled', models.PositiveIntegerField(default=0)),
                ('no_shows', models.PositiveIntegerField(default=0)),
                ('total_teaching_minutes', models.PositiveIntegerField(default=0)),
                ('average_session_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('gross_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('net_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_analytics', to='teaching.teacher')),
            ],
            options={
                'db_table': 'teaching_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.AddIndex(
            model_name='privatelesson',
            index=models.Index(fields=['student', 'status'], name='private_les_student_e1822c_idx'),
        ),
        migrations.AddIndex(
            model_name='privatelesson',
            index=models.Index(fields=['teacher', 'status'], name='private_les_teacher_660a8a_idx'),
        ),
        migrations.AddIndex(
            model_name='privatelesson',
            index=models.Index(fields=['scheduled_datetime'], name='private_les_schedul_48b3e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teacheravailability',
            unique_together={('teacher', 'day_of_week', 'start_time')},
        ),
        migrations.AlterUniqueTogether(
            name='teacherlanguage',
            unique_together={('teacher', 'language_code')},
        ),
        migrations.AlterUniqueTogether(
            name='teacherscheduleoverride',
            unique_together={('teacher', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='teachinganalytics',
            unique_together={('teacher', 'date')},
        ),
    ]
