# Generated by Django 5.1.10 on 2025-09-04 23:39

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FlashcardDeck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Liste des tags pour organiser les decks')),
                ('required_reviews_to_learn', models.PositiveIntegerField(default=3, help_text='Nombre de révisions correctes nécessaires pour marquer une carte comme apprise')),
                ('auto_mark_learned', models.BooleanField(default=True, help_text='Marquer automatiquement les cartes comme apprises après X révisions')),
                ('reset_on_wrong_answer', models.BooleanField(default=False, help_text='Remettre le compteur à zéro si mauvaise réponse')),
                ('default_front_language', models.CharField(blank=True, default='', help_text="Langue par défaut pour le recto des cartes (ex: 'fr', 'en', 'es'). Vide pour détection automatique.", max_length=10)),
                ('default_back_language', models.CharField(blank=True, default='', help_text="Langue par défaut pour le verso des cartes (ex: 'fr', 'en', 'es'). Vide pour détection automatique.", max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_decks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Flashcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('front_text', models.TextField()),
                ('back_text', models.TextField()),
                ('front_language', models.CharField(blank=True, help_text="Code de langue pour le recto (ex: 'fr', 'en', 'es')", max_length=10, null=True)),
                ('back_language', models.CharField(blank=True, help_text="Code de langue pour le verso (ex: 'fr', 'en', 'es')", max_length=10, null=True)),
                ('learned', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('next_review', models.DateTimeField(blank=True, null=True)),
                ('correct_reviews_count', models.PositiveIntegerField(default=0, help_text='Nombre de révisions correctes consécutives')),
                ('total_reviews_count', models.PositiveIntegerField(default=0, help_text='Nombre total de révisions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to=settings.AUTH_USER_MODEL)),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to='revision.flashcarddeck')),
            ],
            options={
                'ordering': ['deck', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('revision_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('know', models.BooleanField(default=False)),
                ('last_reviewed', models.DateTimeField(default=django.utils.timezone.now)),
                ('word', models.CharField(max_length=100)),
                ('translation', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Revision',
                'verbose_name_plural': 'Revisions',
                'indexes': [models.Index(fields=['word'], name='revision_re_word_f0763d_idx'), models.Index(fields=['translation'], name='revision_re_transla_cad9e9_idx')],
            },
        ),
        migrations.CreateModel(
            name='RevisionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_date', models.DateTimeField()),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('MISSED', 'Missed')], default='PENDING', max_length=10)),
                ('success_rate', models.FloatField(blank=True, null=True)),
                ('flashcards', models.ManyToManyField(related_name='revision_sessions', to='revision.flashcard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='RevisionSessionConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom de cette configuration', max_length=100)),
                ('session_type', models.CharField(choices=[('quick', 'Session rapide'), ('standard', 'Session standard'), ('extended', 'Session étendue'), ('custom', 'Session personnalisée')], default='standard', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('target_cards', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(200)])),
                ('include_new_cards', models.BooleanField(default=True)),
                ('include_review_cards', models.BooleanField(default=True)),
                ('include_difficult_cards', models.BooleanField(default=True)),
                ('tags_filter', models.JSONField(blank=True, default=list, help_text='Tags à inclure dans cette session')),
                ('difficulty_filter', models.JSONField(blank=True, default=list, help_text='Niveaux de difficulté à inclure')),
                ('is_default', models.BooleanField(default=False, help_text='Configuration par défaut pour cet utilisateur')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revision_session_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuration de session',
                'verbose_name_plural': 'Configurations de sessions',
            },
        ),
        migrations.CreateModel(
            name='RevisionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_study_mode', models.CharField(choices=[('spaced', 'Répétition espacée'), ('intensive', 'Révision intensive'), ('mixed', 'Mode mixte'), ('custom', 'Personnalisé')], default='spaced', help_text="Mode d'étude par défaut pour les nouvelles sessions", max_length=20)),
                ('default_difficulty', models.CharField(choices=[('easy', 'Facile'), ('normal', 'Normal'), ('hard', 'Difficile'), ('expert', 'Expert')], default='normal', help_text='Niveau de difficulté par défaut', max_length=20)),
                ('default_session_duration', models.PositiveIntegerField(default=20, help_text="Durée par défaut d'une session en minutes", validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('cards_per_session', models.PositiveIntegerField(default=20, help_text='Nombre de cartes par session par défaut', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(100)])),
                ('auto_advance', models.BooleanField(default=True, help_text='Passer automatiquement à la carte suivante après validation')),
                ('spaced_repetition_enabled', models.BooleanField(default=True, help_text="Activer l'algorithme de répétition espacée")),
                ('initial_interval_easy', models.PositiveIntegerField(default=4, help_text='Intervalle initial en jours pour les cartes faciles', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('initial_interval_normal', models.PositiveIntegerField(default=2, help_text='Intervalle initial en jours pour les cartes normales', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('initial_interval_hard', models.PositiveIntegerField(default=1, help_text='Intervalle initial en jours pour les cartes difficiles', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('required_reviews_to_learn', models.PositiveIntegerField(default=3, help_text='Nombre de révisions correctes pour marquer une carte comme apprise', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('reset_on_wrong_answer', models.BooleanField(default=False, help_text='Remettre le compteur à zéro si mauvaise réponse')),
                ('show_progress_stats', models.BooleanField(default=True, help_text='Afficher les statistiques de progression')),
                ('daily_reminder_enabled', models.BooleanField(default=True, help_text='Activer les rappels quotidiens')),
                ('reminder_time', models.TimeField(default='18:00', help_text='Heure des rappels quotidiens')),
                ('notification_frequency', models.CharField(choices=[('daily', 'Quotidienne'), ('weekly', 'Hebdomadaire'), ('custom', 'Personnalisée'), ('disabled', 'Désactivée')], default='daily', help_text='Fréquence des notifications', max_length=20)),
                ('enable_animations', models.BooleanField(default=True, help_text="Activer les animations dans l'interface")),
                ('auto_play_audio', models.BooleanField(default=False, help_text="Lecture automatique de l'audio (si disponible)")),
                ('audio_enabled', models.BooleanField(default=True, help_text='Activer la synthèse vocale')),
                ('audio_speed', models.FloatField(default=0.9, help_text='Vitesse de la synthèse vocale (0.5 à 2.0)', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('preferred_gender_french', models.CharField(choices=[('male', 'Masculin'), ('female', 'Féminin'), ('auto', 'Automatique')], default='auto', help_text='Genre de voix préféré pour le français', max_length=10)),
                ('preferred_gender_english', models.CharField(choices=[('male', 'Masculin'), ('female', 'Féminin'), ('auto', 'Automatique')], default='auto', help_text="Genre de voix préféré pour l'anglais", max_length=10)),
                ('preferred_gender_spanish', models.CharField(choices=[('male', 'Masculin'), ('female', 'Féminin'), ('auto', 'Automatique')], default='auto', help_text="Genre de voix préféré pour l'espagnol", max_length=10)),
                ('preferred_gender_italian', models.CharField(choices=[('male', 'Masculin'), ('female', 'Féminin'), ('auto', 'Automatique')], default='auto', help_text="Genre de voix préféré pour l'italien", max_length=10)),
                ('preferred_gender_german', models.CharField(choices=[('male', 'Masculin'), ('female', 'Féminin'), ('auto', 'Automatique')], default='auto', help_text="Genre de voix préféré pour l'allemand", max_length=10)),
                ('keyboard_shortcuts_enabled', models.BooleanField(default=True, help_text='Activer les raccourcis clavier')),
                ('show_word_stats', models.BooleanField(default=True, help_text='Afficher les statistiques de mots')),
                ('stats_display_mode', models.CharField(choices=[('detailed', 'Détaillé'), ('summary', 'Résumé'), ('minimal', 'Minimal')], default='detailed', help_text="Mode d'affichage des statistiques", max_length=20)),
                ('hide_learned_words', models.BooleanField(default=False, help_text='Masquer les mots déjà appris dans les statistiques')),
                ('group_by_deck', models.BooleanField(default=False, help_text='Grouper les statistiques par deck')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='revision_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paramètres de révision',
                'verbose_name_plural': 'Paramètres de révision',
            },
        ),
        migrations.CreateModel(
            name='UserRevisionProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('Not started', 'Not started'), ('In progress', 'In progress'), ('Completed', 'Completed')], default='Not started', max_length=20)),
                ('percentage_completion', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('time_study', models.IntegerField(default=0, help_text='Time studied in minutes', validators=[django.core.validators.MinValueValidator(0)])),
                ('score_revision', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('words_succeeded', models.IntegerField(default=0)),
                ('words_failed', models.IntegerField(default=0)),
                ('words_to_review', models.IntegerField(default=0)),
                ('revision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='revision.revision')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Revision Progress',
                'verbose_name_plural': 'User Revision Progresses',
            },
        ),
        migrations.CreateModel(
            name='VocabularyWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=255)),
                ('translation', models.CharField(max_length=255)),
                ('source_language', models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('ES', 'Spanish'), ('NL', 'Dutch')], max_length=2)),
                ('target_language', models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('ES', 'Spanish'), ('NL', 'Dutch')], max_length=2)),
                ('context', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('mastery_level', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VocabularyList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('words', models.ManyToManyField(related_name='lists', to='revision.vocabularyword')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='flashcarddeck',
            index=models.Index(fields=['user', 'is_active'], name='revision_fl_user_id_62bfb1_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcarddeck',
            index=models.Index(fields=['is_public'], name='revision_fl_is_publ_9c2fde_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcarddeck',
            index=models.Index(fields=['is_archived'], name='revision_fl_is_arch_d10194_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcarddeck',
            index=models.Index(fields=['expiration_date'], name='revision_fl_expirat_2ffa58_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='flashcarddeck',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['user', 'deck'], name='revision_fl_user_id_d84c9a_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['next_review'], name='revision_fl_next_re_5ff7dc_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['user', 'learned'], name='revision_fl_user_id_ae920f_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['deck', 'learned'], name='revision_fl_deck_id_5c9014_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['user', 'last_reviewed'], name='revision_fl_user_id_5297c5_idx'),
        ),
        migrations.AddIndex(
            model_name='flashcard',
            index=models.Index(fields=['deck', 'next_review'], name='revision_fl_deck_id_078e65_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='revisionsessionconfig',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='userrevisionprogress',
            index=models.Index(fields=['user', 'revision'], name='revision_us_user_id_831143_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyword',
            index=models.Index(fields=['user', 'source_language', 'target_language'], name='revision_vo_user_id_a1a569_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyword',
            index=models.Index(fields=['word'], name='revision_vo_word_b00542_idx'),
        ),
    ]
