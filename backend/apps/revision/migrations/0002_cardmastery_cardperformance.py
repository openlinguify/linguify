# Generated by Django 5.1.10 on 2025-09-30 00:37

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('revision', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CardMastery',
            fields=[
                ('card', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mastery', serialize=False, to='revision.flashcard')),
                ('confidence_score', models.IntegerField(default=0, help_text='Score de confiance global (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('learn_score', models.FloatField(default=0.0, help_text='Taux de réussite en mode Apprendre (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('flashcards_score', models.FloatField(default=0.0, help_text='Taux de réussite en mode Flashcards (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('write_score', models.FloatField(default=0.0, help_text='Taux de réussite en mode Écrire (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('match_score', models.FloatField(default=0.0, help_text='Taux de réussite en mode Associer (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('review_score', models.FloatField(default=0.0, help_text='Taux de réussite en mode Révision (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_learn', models.DateTimeField(blank=True, null=True)),
                ('last_flashcards', models.DateTimeField(blank=True, null=True)),
                ('last_write', models.DateTimeField(blank=True, null=True)),
                ('last_match', models.DateTimeField(blank=True, null=True)),
                ('last_review', models.DateTimeField(blank=True, null=True)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('successful_attempts', models.PositiveIntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mastery_level', models.CharField(choices=[('learning', 'En apprentissage'), ('reviewing', 'En révision'), ('mastered', 'Maîtrisé'), ('struggling', 'En difficulté')], default='learning', help_text='Niveau de maîtrise calculé automatiquement', max_length=20)),
            ],
            options={
                'verbose_name': 'Card Mastery',
                'verbose_name_plural': 'Card Masteries',
            },
        ),
        migrations.CreateModel(
            name='CardPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_mode', models.CharField(choices=[('learn', 'Apprendre'), ('flashcards', 'Flashcards'), ('write', 'Écrire'), ('match', 'Associer'), ('review', 'Révision rapide')], help_text="Mode d'étude dans lequel la performance a été enregistrée", max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile'), ('wrong', 'Incorrect')], help_text="Difficulté perçue par l'utilisateur", max_length=10)),
                ('response_time_seconds', models.FloatField(blank=True, help_text='Temps de réponse en secondes', null=True)),
                ('was_correct', models.BooleanField(default=True, help_text='Si la réponse était correcte')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('session_id', models.CharField(blank=True, help_text="ID de session pour grouper les performances d'une même session d'étude", max_length=100)),
                ('confidence_before', models.IntegerField(blank=True, help_text='Score de confiance avant cette performance', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('confidence_after', models.IntegerField(blank=True, help_text='Score de confiance après cette performance', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='revision.flashcard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_performances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['card', 'study_mode', '-created_at'], name='revision_ca_card_id_aefeb3_idx'), models.Index(fields=['user', '-created_at'], name='revision_ca_user_id_363dd8_idx'), models.Index(fields=['card', '-created_at'], name='revision_ca_card_id_41903b_idx'), models.Index(fields=['study_mode', '-created_at'], name='revision_ca_study_m_6ad143_idx')],
            },
        ),
    ]
