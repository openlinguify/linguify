# Generated by Django 5.1.10 on 2025-07-27 08:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Create models for existing database tables
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_en', models.CharField(blank=True, max_length=100, null=True)),
                ('title_fr', models.CharField(blank=True, max_length=100, null=True)),
                ('title_es', models.CharField(blank=True, max_length=100, null=True)),
                ('title_nl', models.CharField(blank=True, max_length=100, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_nl', models.TextField(blank=True, null=True)),
                ('level', models.CharField(choices=[('A1', 'A1'), ('A2', 'A2'), ('B1', 'B1'), ('B2', 'B2'), ('C1', 'C1'), ('C2', 'C2')], default='A1', max_length=2)),
                ('order', models.IntegerField(default=1)),
                ('teacher_cms_id', models.IntegerField(blank=True, null=True)),
                ('teacher_name', models.CharField(blank=True, max_length=100, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_free', models.BooleanField(default=True)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Unité de cours',
                'verbose_name_plural': 'Unités de cours',
                'ordering': ['level', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_en', models.CharField(blank=True, max_length=100, null=True)),
                ('title_fr', models.CharField(blank=True, max_length=100, null=True)),
                ('title_es', models.CharField(blank=True, max_length=100, null=True)),
                ('title_nl', models.CharField(blank=True, max_length=100, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_nl', models.TextField(blank=True, null=True)),
                ('theme', models.CharField(blank=True, max_length=50, null=True)),
                ('style', models.CharField(default='default', max_length=20)),
                ('order', models.IntegerField(default=1)),
                ('points_reward', models.PositiveIntegerField(default=10)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='course.unit')),
            ],
            options={
                'verbose_name': 'Chapitre',
                'verbose_name_plural': 'Chapitres',
                'ordering': ['unit', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_en', models.CharField(blank=True, max_length=100, null=True)),
                ('title_fr', models.CharField(blank=True, max_length=100, null=True)),
                ('title_es', models.CharField(blank=True, max_length=100, null=True)),
                ('title_nl', models.CharField(blank=True, max_length=100, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_nl', models.TextField(blank=True, null=True)),
                ('lesson_type', models.CharField(choices=[('theory', 'Théorie'), ('vocabulary', 'Vocabulaire'), ('grammar', 'Grammaire'), ('speaking', 'Expression orale'), ('listening', 'Compréhension orale'), ('writing', 'Expression écrite'), ('reading', 'Compréhension écrite'), ('exercise', 'Exercice'), ('test_recap', 'Test récapitulatif')], default='theory', max_length=20)),
                ('estimated_duration', models.PositiveIntegerField(default=10)),
                ('order', models.IntegerField(default=1)),
                ('is_published', models.BooleanField(default=False)),
                ('professional_field', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='course.chapter')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='course.unit')),
            ],
            options={
                'verbose_name': 'Leçon',
                'verbose_name_plural': 'Leçons',
                'ordering': ['unit', 'chapter', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ContentLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('theory', 'Théorie'), ('vocabulary', 'Vocabulaire'), ('grammar', 'Grammaire'), ('exercise', 'Exercice')], max_length=20)),
                ('content_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='content', to='course.lesson')),
            ],
            options={
                'verbose_name': 'Contenu de leçon',
                'verbose_name_plural': 'Contenus de leçons',
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_xp', models.PositiveIntegerField(default=0)),
                ('streak_days', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(auto_now=True)),
                ('current_level', models.CharField(default='A1', max_length=10)),
                ('total_study_time', models.PositiveIntegerField(default=0)),
                ('overall_progress', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progression utilisateur',
                'verbose_name_plural': 'Progressions utilisateur',
                'db_table': 'course_user_progress',
            },
        ),
        migrations.CreateModel(
            name='UnitProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('lessons_completed', models.PositiveIntegerField(default=0)),
                ('current_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_for_users', to='course.lesson')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='course.unit')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Progression d'unité",
                'verbose_name_plural': "Progressions d'unités",
                'db_table': 'course_unit_progress',
            },
        ),
        migrations.CreateModel(
            name='ChapterProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('lessons_completed', models.PositiveIntegerField(default=0)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='course.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapter_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progression de chapitre',
                'verbose_name_plural': 'Progressions de chapitres',
                'db_table': 'course_chapter_progress',
            },
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='not_started', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('best_score', models.PositiveIntegerField(blank=True, null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='course.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progression de leçon',
                'verbose_name_plural': 'Progressions de leçons',
                'db_table': 'course_lesson_progress',
            },
        ),
        # Add constraints
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('unit', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='unitprogress',
            unique_together={('user', 'unit')},
        ),
        migrations.AlterUniqueTogether(
            name='chapterprogress',
            unique_together={('user', 'chapter')},
        ),
        migrations.AlterUniqueTogether(
            name='lessonprogress',
            unique_together={('user', 'lesson')},
        ),
    ]
