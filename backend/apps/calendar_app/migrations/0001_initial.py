# Generated by Django 5.1.10 on 2025-09-04 23:39

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarEventTypeCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('color', models.IntegerField(default=0, help_text='Color index for category display', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('icon', models.CharField(blank=True, help_text='Icon class for category', max_length=50)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Calendar Event Type Category',
                'verbose_name_plural': 'Calendar Event Type Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CalendarAlarm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Alarm display name', max_length=200)),
                ('alarm_type', models.CharField(choices=[('notification', 'Notification'), ('email', 'Email')], default='notification', help_text='Type of alarm notification', max_length=20)),
                ('duration', models.PositiveIntegerField(help_text="Duration value (e.g. 15 for '15 minutes before')", validators=[django.core.validators.MinValueValidator(1)])),
                ('duration_unit', models.CharField(choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks')], default='minutes', help_text='Unit for duration', max_length=10)),
                ('active', models.BooleanField(default=True)),
                ('default_for_user', models.BooleanField(default=False, help_text='Is this a default alarm for the user?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Calendar Alarm',
                'verbose_name_plural': 'Calendar Alarms',
                'ordering': ['duration', 'duration_unit'],
                'unique_together': {('name', 'duration', 'duration_unit')},
            },
        ),
        migrations.CreateModel(
            name='CalendarEmailTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Template name for identification', max_length=100)),
                ('template_type', models.CharField(choices=[('invitation', 'Event Invitation'), ('update', 'Event Update'), ('cancellation', 'Event Cancellation'), ('reminder', 'Event Reminder'), ('response_confirmation', 'Response Confirmation'), ('new_attendee', 'New Attendee Added')], help_text='Type of email template', max_length=50)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'Français'), ('es', 'Español'), ('de', 'Deutsch'), ('it', 'Italiano')], default='en', help_text='Language for this template', max_length=5)),
                ('subject_template', models.CharField(help_text='Email subject template (supports Django template syntax)', max_length=200)),
                ('body_html_template', models.TextField(help_text='HTML email body template (supports Django template syntax)')),
                ('body_text_template', models.TextField(blank=True, help_text='Plain text email body template (auto-generated from HTML if empty)')),
                ('active', models.BooleanField(default=True, help_text='Is this template active?')),
                ('is_default', models.BooleanField(default=False, help_text='Is this the default template for this type?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this template', on_delete=django.db.models.deletion.CASCADE, related_name='created_email_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Calendar Email Template',
                'verbose_name_plural': 'Calendar Email Templates',
                'db_table': 'calendar_email_template',
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Event title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Event description (supports HTML)')),
                ('location', models.CharField(blank=True, help_text='Event location', max_length=500)),
                ('videocall_location', models.URLField(blank=True, help_text='Video call URL')),
                ('start', models.DateTimeField(help_text='Event start datetime')),
                ('stop', models.DateTimeField(help_text='Event end datetime')),
                ('allday', models.BooleanField(default=False, help_text='All day event')),
                ('duration', models.FloatField(default=0.0, help_text='Duration in minutes', validators=[django.core.validators.MinValueValidator(0)])),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('confidential', 'Confidential')], default='public', max_length=20)),
                ('show_as', models.CharField(choices=[('free', 'Free'), ('busy', 'Busy')], default='busy', max_length=10)),
                ('state', models.CharField(choices=[('open', 'Unconfirmed'), ('done', 'Confirmed')], default='open', max_length=10)),
                ('active', models.BooleanField(default=True)),
                ('recurrency', models.BooleanField(default=False, help_text='Is this a recurring event')),
                ('color', models.IntegerField(default=0, help_text='Color index for calendar display (0-11)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alarm_ids', models.ManyToManyField(blank=True, help_text='Alarms/notifications for this event', related_name='events', to='calendar_app.calendaralarm')),
                ('user_id', models.ForeignKey(help_text='Event organizer', on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Calendar Event',
                'verbose_name_plural': 'Calendar Events',
                'ordering': ['start', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CalendarEmailLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recipient_email', models.EmailField(max_length=254)),
                ('recipient_name', models.CharField(blank=True, max_length=100)),
                ('subject', models.CharField(max_length=200)),
                ('body_html', models.TextField(blank=True)),
                ('body_text', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('email_provider_id', models.CharField(blank=True, help_text='Provider-specific message ID', max_length=100)),
                ('opens_count', models.IntegerField(default=0)),
                ('clicks_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_logs', to='calendar_app.calendaremailtemplate')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_logs', to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Email Log',
                'verbose_name_plural': 'Calendar Email Logs',
                'db_table': 'calendar_email_log',
            },
        ),
        migrations.CreateModel(
            name='CalendarAttendee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Attendee email address', max_length=254)),
                ('common_name', models.CharField(blank=True, help_text='Display name for the attendee', max_length=200)),
                ('state', models.CharField(choices=[('needsAction', 'Needs Action'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('tentative', 'Tentative')], default='needsAction', help_text='Attendee response status', max_length=20)),
                ('availability', models.CharField(choices=[('free', 'Free'), ('busy', 'Busy')], default='busy', help_text='Attendee availability during event', max_length=10)),
                ('access_token', models.CharField(blank=True, help_text='Unique token for invitation access', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('partner_id', models.ForeignKey(blank=True, help_text='User attending the event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_attendances', to=settings.AUTH_USER_MODEL)),
                ('event_id', models.ForeignKey(help_text='Associated calendar event', on_delete=django.db.models.deletion.CASCADE, related_name='attendee_ids', to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Attendee',
                'verbose_name_plural': 'Calendar Attendees',
                'ordering': ['common_name', 'email'],
            },
        ),
        migrations.CreateModel(
            name='CalendarAlarmInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_time', models.DateTimeField(help_text='When this alarm should trigger')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('triggered', 'Triggered'), ('sent', 'Sent'), ('failed', 'Failed'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('triggered_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alarm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='calendar_app.calendaralarm')),
                ('user', models.ForeignKey(help_text='User who should receive this alarm', on_delete=django.db.models.deletion.CASCADE, related_name='calendar_alarm_instances', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alarm_instances', to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Alarm Instance',
                'verbose_name_plural': 'Calendar Alarm Instances',
                'ordering': ['trigger_time'],
            },
        ),
        migrations.CreateModel(
            name='CalendarEventType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Event type name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this event type')),
                ('color', models.IntegerField(default=0, help_text='Color index for calendar display (0-11)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('icon', models.CharField(blank=True, help_text="Icon class (e.g., 'bi-calendar-event', 'bi-briefcase')", max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('is_system', models.BooleanField(default=False, help_text='Is this a system-defined event type?')),
                ('default_duration', models.PositiveIntegerField(default=60, help_text='Default duration in minutes for events of this type')),
                ('default_privacy', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('confidential', 'Confidential')], default='public', help_text='Default privacy setting for events of this type', max_length=20)),
                ('default_show_as', models.CharField(choices=[('free', 'Free'), ('busy', 'Busy')], default='busy', help_text='Default availability setting for events of this type', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_alarm_ids', models.ManyToManyField(blank=True, help_text='Default alarms for events of this type', related_name='default_for_event_types', to='calendar_app.calendaralarm')),
            ],
            options={
                'verbose_name': 'Calendar Event Type',
                'verbose_name_plural': 'Calendar Event Types',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='event_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='calendar_app.calendareventtype'),
        ),
        migrations.CreateModel(
            name='CalendarEventTypeExtension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_featured', models.BooleanField(default=False)),
                ('order_in_category', models.PositiveIntegerField(default=0)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_types', to='calendar_app.calendareventtypecategory')),
                ('event_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='extension', to='calendar_app.calendareventtype')),
            ],
            options={
                'verbose_name': 'Calendar Event Type Extension',
                'verbose_name_plural': 'Calendar Event Type Extensions',
                'ordering': ['order_in_category'],
            },
        ),
        migrations.CreateModel(
            name='CalendarInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=300)),
                ('message', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_user_agent', models.CharField(blank=True, max_length=500)),
                ('response_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='calendar_app.calendarattendee')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Invitation',
                'verbose_name_plural': 'Calendar Invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CalendarProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Display name for this provider (e.g., 'Work Calendar')", max_length=100)),
                ('provider_type', models.CharField(choices=[('google', 'Google Calendar'), ('outlook', 'Microsoft Outlook'), ('office365', 'Office 365'), ('apple', 'Apple iCloud'), ('caldav', 'CalDAV'), ('exchange', 'Microsoft Exchange'), ('zimbra', 'Zimbra'), ('yahoo', 'Yahoo Calendar')], help_text='Type of calendar provider', max_length=20)),
                ('client_id', models.CharField(blank=True, help_text='OAuth client ID or application ID', max_length=255)),
                ('encrypted_credentials', models.TextField(blank=True, help_text='Encrypted OAuth tokens, passwords, etc.')),
                ('server_url', models.URLField(blank=True, help_text='Server URL for CalDAV, Exchange, etc.')),
                ('username', models.CharField(blank=True, help_text='Username for basic auth providers', max_length=255)),
                ('external_calendar_id', models.CharField(blank=True, help_text='External calendar ID (e.g., Google Calendar ID)', max_length=255)),
                ('external_calendar_name', models.CharField(blank=True, help_text='Name of the external calendar', max_length=255)),
                ('sync_direction', models.CharField(choices=[('import_only', 'Import Only (External → Linguify)'), ('export_only', 'Export Only (Linguify → External)'), ('bidirectional', 'Bidirectional Sync')], default='bidirectional', help_text='Direction of synchronization', max_length=20)),
                ('sync_frequency', models.CharField(choices=[('manual', 'Manual'), ('15min', 'Every 15 minutes'), ('30min', 'Every 30 minutes'), ('1hour', 'Every hour'), ('6hours', 'Every 6 hours'), ('daily', 'Daily')], default='1hour', help_text='How often to synchronize', max_length=10)),
                ('auto_sync_enabled', models.BooleanField(default=True, help_text='Enable automatic synchronization')),
                ('sync_past_days', models.IntegerField(default=30, help_text='Number of past days to sync')),
                ('sync_future_days', models.IntegerField(default=365, help_text='Number of future days to sync')),
                ('sync_only_busy', models.BooleanField(default=False, help_text="Only sync events marked as 'busy'")),
                ('exclude_all_day_events', models.BooleanField(default=False, help_text='Exclude all-day events from sync')),
                ('active', models.BooleanField(default=True, help_text='Is this provider active?')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Last successful synchronization time', null=True)),
                ('last_sync_status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('warning', 'Warning'), ('never', 'Never Synced')], default='never', help_text='Status of last sync attempt', max_length=20)),
                ('last_sync_error', models.TextField(blank=True, help_text='Error message from last sync attempt')),
                ('sync_count', models.IntegerField(default=0, help_text='Total number of successful syncs')),
                ('connection_verified', models.BooleanField(default=False, help_text='Has the connection been verified?')),
                ('verification_error', models.TextField(blank=True, help_text='Error message from connection verification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider_config', models.JSONField(blank=True, default=dict, help_text='Provider-specific configuration options')),
                ('user', models.ForeignKey(help_text='User who owns this provider configuration', on_delete=django.db.models.deletion.CASCADE, related_name='calendar_providers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Calendar Provider',
                'verbose_name_plural': 'Calendar Providers',
                'db_table': 'calendar_provider',
            },
        ),
        migrations.CreateModel(
            name='CalendarProviderSync',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sync_type', models.CharField(choices=[('auto', 'Automatic'), ('manual', 'Manual'), ('initial', 'Initial Setup')], default='auto', max_length=10)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('events_imported', models.IntegerField(default=0)),
                ('events_exported', models.IntegerField(default=0)),
                ('events_updated', models.IntegerField(default=0)),
                ('events_deleted', models.IntegerField(default=0)),
                ('events_skipped', models.IntegerField(default=0)),
                ('sync_details', models.JSONField(blank=True, default=dict)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_history', to='calendar_app.calendarprovider')),
            ],
            options={
                'verbose_name': 'Calendar Provider Sync',
                'verbose_name_plural': 'Calendar Provider Syncs',
                'db_table': 'calendar_provider_sync',
            },
        ),
        migrations.CreateModel(
            name='CalendarRecurrence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human readable recurrence name', max_length=200)),
                ('rrule_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], default='weekly', help_text='Type of recurrence', max_length=20)),
                ('interval', models.PositiveIntegerField(default=1, help_text='Repeat every X periods')),
                ('monday', models.BooleanField(default=False)),
                ('tuesday', models.BooleanField(default=False)),
                ('wednesday', models.BooleanField(default=False)),
                ('thursday', models.BooleanField(default=False)),
                ('friday', models.BooleanField(default=False)),
                ('saturday', models.BooleanField(default=False)),
                ('sunday', models.BooleanField(default=False)),
                ('month_by', models.CharField(choices=[('date', 'Date of month'), ('day', 'Day of month')], default='date', help_text='Monthly recurrence pattern', max_length=10)),
                ('day', models.PositiveIntegerField(blank=True, help_text='Day of month (1-31)', null=True)),
                ('weekday', models.CharField(blank=True, choices=[('MO', 'Monday'), ('TU', 'Tuesday'), ('WE', 'Wednesday'), ('TH', 'Thursday'), ('FR', 'Friday'), ('SA', 'Saturday'), ('SU', 'Sunday')], help_text='Weekday for monthly recurrence', max_length=2)),
                ('byday', models.CharField(blank=True, help_text='Week of month (-1 to 5)', max_length=10)),
                ('end_type', models.CharField(choices=[('count', 'Number of repetitions'), ('end_date', 'End date'), ('forever', 'Forever')], default='forever', help_text='How the recurrence ends', max_length=20)),
                ('count', models.PositiveIntegerField(blank=True, help_text='Number of occurrences', null=True)),
                ('until', models.DateTimeField(blank=True, help_text='End date for recurrence', null=True)),
                ('dtstart', models.DateTimeField(help_text='Recurrence start datetime')),
                ('event_tz', models.CharField(default='UTC', help_text='Timezone for the events', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('base_event_id', models.ForeignKey(help_text='The base event for this recurrence', on_delete=django.db.models.deletion.CASCADE, related_name='base_recurrences', to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Recurrence',
                'verbose_name_plural': 'Calendar Recurrences',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='recurrence_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='calendar_app.calendarrecurrence'),
        ),
        migrations.CreateModel(
            name='CalendarRecurrenceException',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('exception_date', models.DateTimeField(help_text='Date of the exception')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is this occurrence deleted?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recurrence_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exceptions', to='calendar_app.calendarrecurrence')),
                ('replacement_event', models.ForeignKey(blank=True, help_text='Replacement event for modified occurrence', null=True, on_delete=django.db.models.deletion.CASCADE, to='calendar_app.calendarevent')),
            ],
            options={
                'verbose_name': 'Calendar Recurrence Exception',
                'verbose_name_plural': 'Calendar Recurrence Exceptions',
                'ordering': ['exception_date'],
            },
        ),
        migrations.AddIndex(
            model_name='calendaremailtemplate',
            index=models.Index(fields=['template_type', 'language', 'active'], name='calendar_em_templat_6bcd3f_idx'),
        ),
        migrations.AddIndex(
            model_name='calendaremailtemplate',
            index=models.Index(fields=['is_default', 'active'], name='calendar_em_is_defa_c0b005_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendaremailtemplate',
            unique_together={('template_type', 'language', 'is_default')},
        ),
        migrations.AddIndex(
            model_name='calendaremaillog',
            index=models.Index(fields=['event', 'recipient_email'], name='calendar_em_event_i_0bf39b_idx'),
        ),
        migrations.AddIndex(
            model_name='calendaremaillog',
            index=models.Index(fields=['status', 'sent_at'], name='calendar_em_status_da178c_idx'),
        ),
        migrations.AddIndex(
            model_name='calendaremaillog',
            index=models.Index(fields=['created_at'], name='calendar_em_created_979cc2_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarattendee',
            index=models.Index(fields=['email'], name='calendar_ap_email_26b183_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarattendee',
            index=models.Index(fields=['state'], name='calendar_ap_state_edf9fb_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarattendee',
            index=models.Index(fields=['access_token'], name='calendar_ap_access__8095a9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendarattendee',
            unique_together={('event_id', 'email')},
        ),
        migrations.AddIndex(
            model_name='calendaralarminstance',
            index=models.Index(fields=['trigger_time', 'status'], name='calendar_ap_trigger_94b90e_idx'),
        ),
        migrations.AddIndex(
            model_name='calendaralarminstance',
            index=models.Index(fields=['user', 'status'], name='calendar_ap_user_id_35e311_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendaralarminstance',
            unique_together={('alarm', 'event', 'user')},
        ),
        migrations.AddIndex(
            model_name='calendareventtype',
            index=models.Index(fields=['active'], name='calendar_ap_active_8a319a_idx'),
        ),
        migrations.AddIndex(
            model_name='calendareventtype',
            index=models.Index(fields=['is_system'], name='calendar_ap_is_syst_a953f1_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarprovider',
            index=models.Index(fields=['user', 'active'], name='calendar_pr_user_id_3bb8a0_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarprovider',
            index=models.Index(fields=['provider_type', 'active'], name='calendar_pr_provide_0d7dac_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarprovider',
            index=models.Index(fields=['auto_sync_enabled', 'sync_frequency'], name='calendar_pr_auto_sy_9e6413_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarprovider',
            index=models.Index(fields=['last_sync_at'], name='calendar_pr_last_sy_46bffd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendarprovider',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='calendarprovidersync',
            index=models.Index(fields=['provider', 'started_at'], name='calendar_pr_provide_c7669e_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarprovidersync',
            index=models.Index(fields=['success', 'started_at'], name='calendar_pr_success_8baf05_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['start', 'stop'], name='calendar_ap_start_03857d_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['user_id', 'start'], name='calendar_ap_user_id_3077a4_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['recurrency'], name='calendar_ap_recurre_826940_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['active'], name='calendar_ap_active_1f8589_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendarrecurrenceexception',
            unique_together={('recurrence_id', 'exception_date')},
        ),
    ]
