# Generated by Django 5.1.10 on 2025-09-04 23:31

import apps.authentication.models.models
import apps.authentication.utils.storage
import apps.authentication.utils.validators
import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True, validators=[apps.authentication.utils.validators.validate_username_format])),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'This email address is already associated with an existing account.'}, max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number (e.g., +32 123 456 789)', max_length=20, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('N', 'Non-binary'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_subscribed', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_pending_deletion', models.BooleanField(default=False, help_text='Whether the account is scheduled for deletion')),
                ('deletion_scheduled_at', models.DateTimeField(blank=True, help_text='When the account deletion was requested', null=True)),
                ('deletion_date', models.DateTimeField(blank=True, help_text='When the account will be permanently deleted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, storage=apps.authentication.utils.storage.ProfileStorage(), upload_to='', validators=[apps.authentication.models.models.validate_profile_picture])),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('native_language', models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('NL', 'Dutch'), ('DE', 'German'), ('ES', 'Spanish'), ('IT', 'Italian'), ('PT', 'Portuguese')], default='EN', help_text='Your native language', max_length=20)),
                ('target_language', models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('NL', 'Dutch'), ('DE', 'German'), ('ES', 'Spanish'), ('IT', 'Italian'), ('PT', 'Portuguese')], default='FR', help_text='The language you want to learn', max_length=20)),
                ('language_level', models.CharField(choices=[('A1', 'A1'), ('A2', 'A2'), ('B1', 'B1'), ('B2', 'B2'), ('C1', 'C1'), ('C2', 'C2')], default='A1', help_text='Your language level', max_length=2)),
                ('objectives', models.CharField(choices=[('Travel', 'Travel'), ('Business', 'Business'), ('Live Abroad', 'Live Abroad'), ('Exam', 'Exam'), ('For Fun', 'For Fun'), ('Work', 'Work'), ('School', 'School'), ('Study', 'Study'), ('Personal', 'Personal')], default='Travel', help_text='Your learning objectives', max_length=20)),
                ('is_coach', models.BooleanField(default=False)),
                ('interface_language', models.CharField(default='en', max_length=10)),
                ('theme', models.CharField(default='light', max_length=10)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('weekday_reminders', models.BooleanField(default=True)),
                ('weekend_reminders', models.BooleanField(default=False)),
                ('reminder_time', models.TimeField(default=datetime.time(18, 0))),
                ('speaking_exercises', models.BooleanField(default=True)),
                ('listening_exercises', models.BooleanField(default=True)),
                ('reading_exercises', models.BooleanField(default=True)),
                ('writing_exercises', models.BooleanField(default=True)),
                ('daily_goal', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(1)])),
                ('public_profile', models.BooleanField(default=True)),
                ('share_progress', models.BooleanField(default=True)),
                ('share_activity', models.BooleanField(default=False)),
                ('terms_accepted', models.BooleanField(default=False, help_text='Whether the user has accepted the terms and conditions')),
                ('terms_accepted_at', models.DateTimeField(blank=True, help_text='When the user accepted the terms and conditions', null=True)),
                ('terms_version', models.CharField(blank=True, default='v1.0', help_text='Version of terms that was accepted', max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='CoachProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coaching_languages', models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('NL', 'Dutch'), ('DE', 'German'), ('ES', 'Spanish'), ('IT', 'Italian'), ('PT', 'Portuguese')], default='EN', max_length=20)),
                ('price_per_hour', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('availability', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Commission rate taken by Linguify (in %).', max_digits=5)),
                ('commission_override', models.DecimalField(blank=True, decimal_places=2, help_text='Override the default commission rate.', max_digits=5, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coach_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CookieConsent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, help_text='Session ID for anonymous users', max_length=40, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when consent was given', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string when consent was given', null=True)),
                ('version', models.CharField(default='1.0', help_text='Version of the consent form', max_length=10)),
                ('essential', models.BooleanField(default=True, help_text='Essential cookies (always true)')),
                ('analytics', models.BooleanField(default=False, help_text='Analytics cookies (Google Analytics, etc.)')),
                ('functionality', models.BooleanField(default=False, help_text='Functionality cookies (user preferences, etc.)')),
                ('performance', models.BooleanField(default=False, help_text='Performance cookies (caching, optimization, etc.)')),
                ('language', models.CharField(default='fr', help_text='Language when consent was given', max_length=10)),
                ('consent_method', models.CharField(choices=[('banner', 'Cookie Banner'), ('settings', 'Settings Page'), ('api', 'API Call'), ('import', 'Data Import')], default='banner', help_text='How the consent was obtained', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When consent was given')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When consent was last updated')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When consent expires (null = never)', null=True)),
                ('is_revoked', models.BooleanField(default=False, help_text='Whether consent has been revoked')),
                ('revoked_at', models.DateTimeField(blank=True, help_text='When consent was revoked', null=True)),
                ('revocation_reason', models.CharField(blank=True, choices=[('user_request', 'User Request'), ('expired', 'Expired'), ('version_change', 'Version Change'), ('admin_action', 'Admin Action'), ('data_deletion', 'Account Deletion')], help_text='Reason for revocation', max_length=100, null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who gave consent (null for anonymous users)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cookie_consents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cookie Consent',
                'verbose_name_plural': 'Cookie Consents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CookieConsentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('revoked', 'Revoked'), ('expired', 'Expired')], max_length=20)),
                ('old_values', models.JSONField(blank=True, help_text='Previous values before change', null=True)),
                ('new_values', models.JSONField(blank=True, help_text='New values after change', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('consent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='authentication.cookieconsent')),
            ],
            options={
                'verbose_name': 'Cookie Consent Log',
                'verbose_name_plural': 'Cookie Consent Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='Unique verification token', max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Token expiration time')),
                ('is_used', models.BooleanField(default=False, help_text='Whether the token has been used')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Verification Token',
                'verbose_name_plural': 'Email Verification Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('comment', models.TextField(blank=True, max_length=500, null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('coach', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='authentication.coachprofile')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], default='like', max_length=10)),
                ('feedback_content', models.TextField(blank=True, null=True)),
                ('feedback_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('username'), name='unique_username_case_insensitive', violation_error_message='This username is already taken.'),
        ),
        migrations.AlterUniqueTogether(
            name='coachprofile',
            unique_together={('user', 'coaching_languages')},
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['user', '-created_at'], name='authenticat_user_id_632a4e_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['session_id', '-created_at'], name='authenticat_session_9fc24d_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['ip_address', '-created_at'], name='authenticat_ip_addr_3ac6be_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['version'], name='authenticat_version_c6f0e3_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['created_at'], name='authenticat_created_4c4232_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsent',
            index=models.Index(fields=['is_revoked'], name='authenticat_is_revo_2ebcdd_idx'),
        ),
        migrations.AddConstraint(
            model_name='cookieconsent',
            constraint=models.UniqueConstraint(condition=models.Q(('is_revoked', False), ('user__isnull', False)), fields=('user',), name='unique_active_user_consent'),
        ),
        migrations.AddIndex(
            model_name='cookieconsentlog',
            index=models.Index(fields=['consent', '-created_at'], name='authenticat_consent_61b9e0_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsentlog',
            index=models.Index(fields=['action'], name='authenticat_action_7fe8a1_idx'),
        ),
        migrations.AddIndex(
            model_name='cookieconsentlog',
            index=models.Index(fields=['created_at'], name='authenticat_created_c998bb_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['token'], name='authenticat_token_e79b2f_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['user', '-created_at'], name='authenticat_user_id_46deae_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['expires_at'], name='authenticat_expires_ae4371_idx'),
        ),
    ]
