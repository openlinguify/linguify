# -*- coding: utf-8 -*-
# Part of Linguify. See LICENSE file for full copyright and licensing details.

"""
Middleware de debug complet pour tracker toutes les requ√™tes, erreurs et exceptions
"""

import logging
import time
from django.utils.deprecation import MiddlewareMixin
from django.http import Http404
from django.conf import settings

logger = logging.getLogger(__name__)


class DebugMiddleware(MiddlewareMixin):
    """
    Middleware de debug pour capturer toutes les informations de requ√™te/r√©ponse
    """

    def process_request(self, request):
        """
        Capture toutes les informations de la requ√™te entrante
        """
        request._start_time = time.time()

        logger.info(f"üöÄ ===== NEW REQUEST START =====")
        logger.info(f"üéØ METHOD: {request.method}")
        logger.info(f"üåê PATH: {request.path}")
        logger.info(f"üîó FULL URL: {request.build_absolute_uri()}")
        logger.info(f"üì± USER AGENT: {request.META.get('HTTP_USER_AGENT', 'N/A')[:150]}")
        logger.info(f"üåç ACCEPT LANGUAGE: {request.META.get('HTTP_ACCEPT_LANGUAGE', 'N/A')}")
        logger.info(f"üîó REFERER: {request.META.get('HTTP_REFERER', 'N/A')}")
        logger.info(f"üè† REMOTE ADDR: {request.META.get('REMOTE_ADDR', 'N/A')}")
        logger.info(f"üîÑ QUERY STRING: {request.META.get('QUERY_STRING', 'N/A')}")

        if request.GET:
            logger.info(f"üìã GET PARAMS: {dict(request.GET)}")

        if request.method == 'POST' and request.POST:
            # Log POST data but filter sensitive info
            post_data = dict(request.POST)
            sensitive_fields = ['password', 'password1', 'password2', 'csrfmiddlewaretoken']
            for field in sensitive_fields:
                if field in post_data:
                    post_data[field] = ['***HIDDEN***']
            logger.info(f"üìù POST PARAMS: {post_data}")

        # Log session info if available
        if hasattr(request, 'session'):
            session_data = dict(request.session)
            if 'django_language' in session_data:
                logger.info(f"üåê SESSION LANGUAGE: {session_data['django_language']}")
            logger.info(f"üîë SESSION KEYS: {list(session_data.keys())}")

        return None

    def process_view(self, request, view_func, view_args, view_kwargs):
        """
        Log quelle vue va √™tre appel√©e
        """
        view_name = getattr(view_func, '__name__', str(view_func))
        module_name = getattr(view_func, '__module__', 'Unknown')

        logger.info(f"üéØ VIEW RESOLVED: {module_name}.{view_name}")
        logger.info(f"üìä VIEW ARGS: {view_args}")
        logger.info(f"üìä VIEW KWARGS: {view_kwargs}")

        return None

    def process_response(self, request, response):
        """
        Log la r√©ponse et calcule le temps de traitement
        """
        duration = 0
        if hasattr(request, '_start_time'):
            duration = (time.time() - request._start_time) * 1000  # ms

        status_emoji = {
            200: "‚úÖ", 201: "‚úÖ", 202: "‚úÖ", 204: "‚úÖ",
            301: "üîÑ", 302: "üîÑ", 303: "üîÑ", 307: "üîÑ", 308: "üîÑ",
            400: "‚ùå", 401: "üîí", 403: "üö´", 404: "üöØ", 405: "üö´",
            500: "üí•", 502: "üí•", 503: "üí•", 504: "üí•"
        }.get(response.status_code, "‚ùì")

        logger.info(f"üèÅ RESPONSE: {status_emoji} {response.status_code} | ‚è±Ô∏è {duration:.2f}ms")

        # Log redirects avec la destination
        if response.status_code in [301, 302, 303, 307, 308]:
            location = response.get('Location', 'N/A')
            logger.warning(f"üîÑ REDIRECT: {response.status_code} ‚Üí {location}")

        # Log des d√©tails sur les erreurs
        if response.status_code >= 400:
            logger.error(f"‚ùå ERROR RESPONSE: {response.status_code} for {request.method} {request.path}")

            # Log le contenu pour les petites erreurs
            if hasattr(response, 'content') and len(response.content) < 2000:
                try:
                    content_preview = response.content.decode('utf-8', errors='ignore')[:300]
                    logger.error(f"üìÑ ERROR CONTENT: {content_preview}")
                except:
                    logger.error(f"üìÑ ERROR CONTENT: [Unable to decode]")

        # Log sp√©cial pour les 404
        if response.status_code == 404:
            logger.error(f"üöØ 404 NOT FOUND: {request.method} {request.path}")
            logger.error(f"üöØ 404 FULL URL: {request.build_absolute_uri()}")
            logger.error(f"üöØ 404 REFERER: {request.META.get('HTTP_REFERER', 'N/A')}")

        logger.info(f"üèÅ ===== REQUEST END ({duration:.2f}ms) =====")
        return response

    def process_exception(self, request, exception):
        """
        Log toutes les exceptions non g√©r√©es
        """
        duration = 0
        if hasattr(request, '_start_time'):
            duration = (time.time() - request._start_time) * 1000

        exception_type = type(exception).__name__

        if isinstance(exception, Http404):
            logger.error(f"üöØ HTTP 404 EXCEPTION: {request.method} {request.path}")
            logger.error(f"üöØ 404 MESSAGE: {str(exception)}")
        else:
            logger.error(f"üí• UNHANDLED EXCEPTION: {exception_type} in {request.method} {request.path}")
            logger.error(f"üí• EXCEPTION MESSAGE: {str(exception)}")
            logger.error(f"üí• EXCEPTION DETAILS:", exc_info=True)

        logger.error(f"üí• EXCEPTION AFTER {duration:.2f}ms")
        return None