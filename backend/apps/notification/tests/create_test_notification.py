#!/usr/bin/env python
"""
Script pour cr√©er une nouvelle notification de test avec URL d'action
"""
import os
import sys
import django

# Remonter au r√©pertoire backend
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.conf import settings
from django.utils import timezone
from apps.notification.models import Notification, NotificationType, NotificationPriority

User = get_user_model()

def create_test_notification():
    """Cr√©e une nouvelle notification de test avec redirection"""

    # Utiliser l'utilisateur de test depuis TEST_EMAIL
    try:
        user = User.objects.get(email=os.getenv('TEST_EMAIL'))
        print(f"‚úì Utilisateur trouv√© : {user.username} ({user.email})")
    except User.DoesNotExist:
        print(f"‚ùå Utilisateur {os.getenv("TEST_EMAIL")} non trouv√©")
        return False

    print("\n" + "=" * 70)
    print("üîî CR√âATION NOTIFICATION DE TEST AVEC REDIRECTION")
    print("=" * 70)

    # Cr√©er une nouvelle notification
    backend_url = getattr(settings, 'SITE_URL', 'http://localhost:8000')
    terms_url = f"{backend_url}/authentication/terms/accept/"

    # D√©terminer le message selon la langue
    lang = user.interface_language
    if lang == 'fr':
        title = "üö® TEST - Action Requise"
        message = "Cliquez ici pour accepter les conditions d'utilisation (TEST)"
    elif lang == 'nl':
        title = "üö® TEST - Actie Vereist"
        message = "Klik hier om de gebruiksvoorwaarden te accepteren (TEST)"
    elif lang == 'es':
        title = "üö® TEST - Acci√≥n Requerida"
        message = "Haz clic aqu√≠ para aceptar los t√©rminos de uso (TEST)"
    else:  # en
        title = "üö® TEST - Action Required"
        message = "Click here to accept the terms of use (TEST)"

    notification = Notification.objects.create(
        user=user,
        type='action_required',
        title=title,
        message=message,
        priority='high',
        data={
            'action': 'accept_terms',
            'action_url': terms_url,
            'test': True,
            'created_by': 'test_script',
            'timestamp': timezone.now().isoformat()
        },
        is_read=False
    )

    print(f"‚úÖ Notification cr√©√©e avec succ√®s!")
    print(f"\nüìã D√©tails de la notification:")
    print(f"  ‚Ä¢ ID: {notification.id}")
    print(f"  ‚Ä¢ Titre: {notification.title}")
    print(f"  ‚Ä¢ Message: {notification.message}")
    print(f"  ‚Ä¢ Type: {notification.type}")
    print(f"  ‚Ä¢ Priorit√©: {notification.priority}")
    print(f"  ‚Ä¢ Non lue: ‚úì")
    print(f"\nüì¶ Donn√©es JSON:")
    for key, value in notification.data.items():
        print(f"  ‚Ä¢ {key}: {value}")

    print("\n" + "=" * 70)
    print("üß™ TEST DE REDIRECTION")
    print("=" * 70)
    print("\n1. Connectez-vous avec:")
    print(f"   ‚Ä¢ Email: {user.email}")
    print(f"   ‚Ä¢ Mot de passe: TestPassword123!")

    print("\n2. Cliquez sur l'ic√¥ne cloche üîî")

    print("\n3. Cliquez sur la notification de test:")
    print(f"   '{title}'")

    print("\n4. Vous devriez √™tre redirig√© vers:")
    print(f"   {terms_url}")

    print("\n5. V√©rifiez la console du navigateur (F12) pour:")
    print("   ‚Ä¢ [NotificationHeader] Terms notification clicked")
    print("   ‚Ä¢ [NotificationHeader] Notification data")
    print("   ‚Ä¢ [NotificationHeader] Redirecting to: " + terms_url)

    print("\nüí° Si la redirection ne fonctionne pas:")
    print("   1. Videz le cache du navigateur (Ctrl+F5)")
    print("   2. V√©rifiez que le fichier JS est √† jour")
    print("   3. Regardez les erreurs dans la console")

    # Afficher les derni√®res notifications
    print("\n" + "=" * 70)
    print("üìä DERNI√àRES NOTIFICATIONS NON LUES")
    print("=" * 70)

    unread = Notification.objects.filter(
        user=user,
        is_read=False
    ).order_by('-created_at')[:5]

    for notif in unread:
        time = notif.created_at.strftime('%H:%M:%S')
        has_url = '‚úì' if (notif.data and 'action_url' in notif.data) else '‚úó'
        print(f"üîµ [{time}] {notif.title[:40]} - URL: {has_url}")

    return True

if __name__ == "__main__":
    print("üöÄ Open Linguify - Cr√©ation Notification Test")
    print("=" * 70)

    success = create_test_notification()

    if success:
        print("\n‚ú® Notification de test cr√©√©e avec succ√®s!")
    else:
        print("\n‚ö†Ô∏è √âchec de la cr√©ation")
        sys.exit(1)