#!/usr/bin/env python
"""
Script pour v√©rifier les donn√©es des notifications et leur URL d'action
"""
import os
import sys
import django
import json

# Remonter au r√©pertoire backend
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.notification.models import Notification

User = get_user_model()

def check_notification_data():
    """V√©rifie les donn√©es des notifications pour l'utilisateur test"""

    # Utiliser l'utilisateur linguify.info@gmail.com
    try:
        user = User.objects.get(email='linguify.info@gmail.com')
        print(f"‚úì Utilisateur trouv√© : {user.username} ({user.email})")
    except User.DoesNotExist:
        print("‚ùå Utilisateur linguify.info@gmail.com non trouv√©")
        return False

    print("\n" + "=" * 70)
    print("üîç V√âRIFICATION DES DONN√âES DE NOTIFICATION")
    print("=" * 70)

    # R√©cup√©rer les notifications de type terms/action_required
    terms_notifications = Notification.objects.filter(
        user=user,
        type__in=['terms', 'terms_update', 'action_required']
    ).order_by('-created_at')[:5]

    if not terms_notifications:
        print("‚ùå Aucune notification de conditions d'utilisation trouv√©e")
        return False

    for i, notif in enumerate(terms_notifications, 1):
        print(f"\nüìã Notification #{i}")
        print("-" * 50)
        print(f"  ID: {notif.id}")
        print(f"  Type: {notif.type}")
        print(f"  Titre: {notif.title}")
        print(f"  Message: {notif.message[:100]}...")
        print(f"  Priorit√©: {notif.priority}")
        print(f"  Non lu: {'‚úì' if not notif.is_read else '‚úó'}")
        print(f"  Cr√©√©e: {notif.created_at.strftime('%Y-%m-%d %H:%M:%S')}")

        # V√©rifier les donn√©es JSON
        print(f"\n  üì¶ Donn√©es JSON:")
        if notif.data:
            try:
                # Afficher les donn√©es format√©es
                for key, value in notif.data.items():
                    print(f"    ‚Ä¢ {key}: {value}")

                # V√©rifier sp√©cifiquement action_url
                if 'action_url' in notif.data:
                    print(f"\n  ‚úÖ URL d'action trouv√©e: {notif.data['action_url']}")
                else:
                    print(f"\n  ‚ö†Ô∏è Pas d'URL d'action dans les donn√©es")
                    print(f"     ‚Üí L'URL devrait √™tre ajout√©e avec la cl√© 'action_url'")

            except Exception as e:
                print(f"    ‚ùå Erreur lors de la lecture des donn√©es: {e}")
        else:
            print(f"    ‚ö†Ô∏è Pas de donn√©es JSON")

    # Suggestion de correction
    print("\n" + "=" * 70)
    print("üí° SUGGESTIONS")
    print("=" * 70)

    if terms_notifications:
        latest = terms_notifications[0]
        if not latest.data or 'action_url' not in latest.data:
            print("Pour corriger le probl√®me de redirection:")
            print("\n1. La notification doit avoir 'action_url' dans ses donn√©es:")
            print("   notification.data = {'action_url': 'http://localhost:8080/annexes/terms'}")

            print("\n2. Le JavaScript v√©rifie maintenant:")
            print("   - data.action_url (priorit√©)")
            print("   - Fallback sur localhost:8080 si terms/conditions dans le message")

            print("\n3. Pour corriger les notifications existantes, utilisez:")
            print("   python apps/notification/tests/fix_notification_urls.py")

    return True

if __name__ == "__main__":
    print("üöÄ Open Linguify - V√©rification des donn√©es de notification")
    print("=" * 70)

    success = check_notification_data()

    if success:
        print("\n‚úÖ V√©rification termin√©e")
    else:
        print("\n‚ö†Ô∏è V√©rification √©chou√©e")
        sys.exit(1)