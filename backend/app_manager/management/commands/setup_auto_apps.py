"""
Commande Django pour configurer automatiquement les nouvelles apps
"""
from django.core.management.base import BaseCommand, CommandError
from app_manager.services.auto_manifest_service import auto_manifest_service
from django.utils.termcolors import make_style
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Configure automatiquement les nouvelles apps (manifests + App Store)'

    def __init__(self):
        super().__init__()
        self.success = make_style(opts=('bold',), fg='green')
        self.warning = make_style(opts=('bold',), fg='yellow') 
        self.error = make_style(opts=('bold',), fg='red')
        self.info = make_style(fg='cyan')

    def add_arguments(self, parser):
        parser.add_argument(
            '--no-manifests',
            action='store_true',
            help='Ne pas cr√©er les manifests manquants',
        )
        parser.add_argument(
            '--no-sync',
            action='store_true',
            help='Ne pas synchroniser vers la base de donn√©es',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simulation - ne fait aucun changement',
        )
        parser.add_argument(
            '--check-readiness',
            action='store_true',
            help='V√©rifier la pr√©paration des apps et mettre √† jour installable',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.success('üöÄ Configuration automatique des apps'))
        self.stdout.write('=' * 50)

        # D√©couvrir d'abord les apps sans manifest
        apps_without_manifest = auto_manifest_service.discover_apps_without_manifest()
        
        if not apps_without_manifest:
            self.stdout.write(self.success('‚úÖ Toutes les apps ont d√©j√† des manifests !'))
        else:
            self.stdout.write(self.warning(f'üìã Apps sans manifest trouv√©es : {len(apps_without_manifest)}'))
            for app_code in apps_without_manifest:
                self.stdout.write(f'  - apps.{app_code}')

        if options['dry_run']:
            self.stdout.write(self.info('\nüîç MODE SIMULATION - Aucun changement effectu√©'))
            return

        # Configurer les options
        create_manifests = not options['no_manifests']
        sync_database = not options['no_sync']

        # Ex√©cuter le setup automatique
        try:
            results = auto_manifest_service.auto_setup_new_apps(
                create_manifests=create_manifests,
                sync_database=sync_database
            )
            
            # Afficher les r√©sultats
            self.stdout.write('\nüìä R√âSULTATS :')
            
            if create_manifests:
                created = results['manifests_created']
                if created > 0:
                    self.stdout.write(self.success(f'‚úÖ {created} manifest(s) cr√©√©(s)'))
                else:
                    self.stdout.write(self.info('‚ÑπÔ∏è  Aucun nouveau manifest cr√©√©'))
            
            if sync_database:
                db_results = results['database_sync']
                total = db_results['total_apps']
                created = db_results['created']
                updated = db_results['updated']
                
                self.stdout.write(self.success(f'‚úÖ Base de donn√©es synchronis√©e'))
                self.stdout.write(f'   üì± {total} apps avec manifest trouv√©es')
                if created > 0:
                    self.stdout.write(f'   ‚ûï {created} apps ajout√©es √† l\'App Store')
                if updated > 0:
                    self.stdout.write(f'   üîÑ {updated} apps mises √† jour')
                if created == 0 and updated == 0:
                    self.stdout.write(self.info('   ‚ÑπÔ∏è  Toutes les apps √©taient d√©j√† √† jour'))

            self.stdout.write(self.success('\nüéâ Configuration termin√©e avec succ√®s !'))
            
            # V√©rification de pr√©paration si demand√©
            if options['check_readiness']:
                self.stdout.write('\nüîç V√©rification de la pr√©paration des apps...')
                from app_manager.services.app_readiness_service import app_readiness_service
                
                updated_count = 0
                for app_code in apps_without_manifest if create_manifests else []:
                    if app_readiness_service.update_manifest_installable_status(app_code):
                        readiness = app_readiness_service.get_production_readiness_score(app_code)
                        if readiness:
                            should_be = readiness['percentage'] >= 70
                            status = 'installable' if should_be else 'non-installable'
                            self.stdout.write(f'  ‚Ä¢ {app_code}: {status} ({readiness["percentage"]}%)')
                            updated_count += 1
                
                if updated_count > 0:
                    self.stdout.write(self.success(f'‚úÖ {updated_count} statut(s) installable mis √† jour'))
                else:
                    self.stdout.write(self.info('‚ÑπÔ∏è  Aucun statut installable √† mettre √† jour'))
            
            if apps_without_manifest and create_manifests:
                self.stdout.write('\nüí° √âTAPES SUIVANTES :')
                self.stdout.write('1. V√©rifiez les manifests g√©n√©r√©s dans apps/*/____manifest__.py')
                self.stdout.write('2. Personnalisez les descriptions, cat√©gories, etc.')
                self.stdout.write('3. Ajoutez des ic√¥nes PNG dans static/app_name/description/icon.png')
                self.stdout.write('4. Utilisez --check-readiness pour valider la pr√©paration')
                self.stdout.write('5. Les apps pr√™tes appara√Ætront automatiquement dans l\'App Store !')

        except Exception as e:
            logger.error(f"Erreur lors de la configuration : {e}")
            raise CommandError(f'Erreur lors de la configuration : {e}')