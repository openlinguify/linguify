# Generated by Django 5.0.3 on 2025-10-07 23:54

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0001_initial'),
        ('teachers', '0002_teacherannouncement'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_duration_minutes', models.PositiveIntegerField(default=60)),
                ('color', models.CharField(default='#2196F3', help_text='Hex color for calendar', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('max_students', models.PositiveIntegerField(default=1, help_text='1 for one-on-one, >1 for group')),
            ],
            options={
                'db_table': 'cms_appointment_types',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', '‚è≥ En attente'), ('confirmed', '‚úÖ Confirm√©'), ('in_progress', '‚ñ∂Ô∏è En cours'), ('completed', '‚úîÔ∏è Termin√©'), ('cancelled', '‚ùå Annul√©'), ('no_show', 'üëª Absent')], default='pending', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('language', models.CharField(blank=True, max_length=10)),
                ('level', models.CharField(blank=True, max_length=20)),
                ('meeting_url', models.URLField(blank=True, help_text='Zoom, Google Meet, etc.')),
                ('meeting_id', models.CharField(blank=True, max_length=100)),
                ('meeting_password', models.CharField(blank=True, max_length=50)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_paid', models.BooleanField(default=False)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cancelled_appointments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='teachers.teacher')),
                ('appointment_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.appointmenttype')),
            ],
            options={
                'db_table': 'cms_appointments',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='AppointmentReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reminder_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')], max_length=20)),
                ('minutes_before', models.PositiveIntegerField(help_text='Send X minutes before appointment')),
                ('scheduled_for', models.DateTimeField()),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Programm√©'), ('sent', 'Envoy√©'), ('failed', '√âchou√©'), ('cancelled', 'Annul√©')], default='scheduled', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('max_retries', models.PositiveIntegerField(default=3)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='scheduling.appointment')),
            ],
            options={
                'db_table': 'cms_appointment_reminders',
                'ordering': ['scheduled_for'],
            },
        ),
        migrations.CreateModel(
            name='RecurringAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weekday', models.IntegerField(choices=[(0, 'Lundi'), (1, 'Mardi'), (2, 'Mercredi'), (3, 'Jeudi'), (4, 'Vendredi'), (5, 'Samedi'), (6, 'Dimanche')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('valid_from', models.DateField(default=django.utils.timezone.now)),
                ('valid_until', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_availabilities', to='teachers.teacher')),
            ],
            options={
                'db_table': 'cms_recurring_availability',
                'ordering': ['weekday', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teaching_quality', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('knowledge', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('what_went_well', models.TextField(blank=True)),
                ('suggestions', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='scheduling.appointment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'cms_session_feedbacks',
            },
        ),
        migrations.CreateModel(
            name='SessionNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topics_covered', models.TextField(help_text='Topics/content covered in session')),
                ('homework_assigned', models.TextField(blank=True)),
                ('student_performance', models.TextField(blank=True)),
                ('strengths', models.TextField(blank=True)),
                ('areas_for_improvement', models.TextField(blank=True)),
                ('next_session_focus', models.TextField(blank=True)),
                ('recommended_resources', models.TextField(blank=True)),
                ('private_notes', models.TextField(blank=True, help_text='Only visible to teacher')),
                ('is_shared_with_student', models.BooleanField(default=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='session_note', to='scheduling.appointment')),
            ],
            options={
                'db_table': 'cms_session_notes',
            },
        ),
        migrations.CreateModel(
            name='TeacherAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('availability_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_manual', models.BooleanField(default=True)),
                ('is_available', models.BooleanField(default=True)),
                ('is_booked', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('recurring_pattern', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.recurringavailability')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='teachers.teacher')),
            ],
            options={
                'db_table': 'cms_teacher_availability',
                'ordering': ['date', 'start_time'],
                'unique_together': {('teacher', 'date', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slot_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField()),
                ('is_booked', models.BooleanField(default=False)),
                ('is_blocked', models.BooleanField(default=False)),
                ('buffer_before', models.PositiveIntegerField(default=0)),
                ('buffer_after', models.PositiveIntegerField(default=0)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='scheduling.teacheravailability')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='teachers.teacher')),
            ],
            options={
                'db_table': 'cms_time_slots',
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='BookingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuv√©'), ('declined', 'Refus√©'), ('expired', 'Expir√©')], default='pending', max_length=20)),
                ('message', models.TextField(blank=True, help_text="Student's message to teacher")),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_message', models.TextField(blank=True)),
                ('expires_at', models.DateTimeField()),
                ('appointment_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.appointmenttype')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_requests', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_requests', to='teachers.teacher')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.timeslot')),
            ],
            options={
                'db_table': 'cms_booking_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='time_slot',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.timeslot'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['teacher', 'status', 'start_datetime'], name='cms_appoint_teacher_e1be10_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['student', 'status', 'start_datetime'], name='cms_appoint_student_1d22d4_idx'),
        ),
    ]
