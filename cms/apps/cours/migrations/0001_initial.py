# Generated by Django 5.0.3 on 2025-10-07 23:54

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teachers', '0002_teacherannouncement'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('category_type', models.CharField(choices=[('development', 'üíª Development'), ('business', 'üíº Business'), ('finance', 'üí∞ Finance & Accounting'), ('it_software', 'üñ•Ô∏è IT & Software'), ('office_productivity', 'üìä Office Productivity'), ('personal_development', 'üåü Personal Development'), ('design', 'üé® Design'), ('marketing', 'üìà Marketing'), ('lifestyle', 'üéØ Lifestyle'), ('photography', 'üì∑ Photography & Video'), ('health_fitness', 'üí™ Health & Fitness'), ('music', 'üéµ Music'), ('teaching', 'üë®\u200düè´ Teaching & Academics'), ('languages', 'üó£Ô∏è Languages')], max_length=30, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='bi-folder', max_length=50)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Course Categories',
                'db_table': 'cms_course_categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CourseTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'cms_course_tags',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Sync'), ('synced', 'Synced'), ('failed', 'Sync Failed')], default='draft', max_length=20)),
                ('backend_id', models.PositiveIntegerField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_error', models.TextField(blank=True)),
                ('course_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('title_en', models.CharField(max_length=200)),
                ('title_fr', models.CharField(max_length=200)),
                ('title_es', models.CharField(max_length=200)),
                ('title_nl', models.CharField(max_length=200)),
                ('subtitle_en', models.CharField(blank=True, max_length=250)),
                ('subtitle_fr', models.CharField(blank=True, max_length=250)),
                ('subtitle_es', models.CharField(blank=True, max_length=250)),
                ('subtitle_nl', models.CharField(blank=True, max_length=250)),
                ('description_en', models.TextField()),
                ('description_fr', models.TextField()),
                ('description_es', models.TextField()),
                ('description_nl', models.TextField()),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning outcomes')),
                ('requirements', models.JSONField(default=list, help_text='List of prerequisites')),
                ('target_audience', models.JSONField(default=list, help_text='Who is this course for')),
                ('level', models.CharField(choices=[('all_levels', 'All Levels'), ('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='all_levels', max_length=20)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'Fran√ßais'), ('es', 'Espa√±ol'), ('nl', 'Nederlands')], default='fr', max_length=5)),
                ('thumbnail', models.ImageField(blank=True, help_text='Course thumbnail (1920x1080 recommended)', upload_to='courses/thumbnails/')),
                ('promo_video', models.FileField(blank=True, help_text='Promotional video', upload_to='courses/promos/')),
                ('status', models.CharField(choices=[('draft', 'üìù Draft'), ('in_review', 'üëÄ In Review'), ('published', '‚úÖ Published'), ('archived', 'üì¶ Archived')], default='draft', max_length=20)),
                ('is_published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('is_enrollable', models.BooleanField(default=True)),
                ('max_students', models.PositiveIntegerField(blank=True, help_text='Maximum number of students (null = unlimited)', null=True)),
                ('enrollment_count', models.PositiveIntegerField(default=0)),
                ('estimated_duration_hours', models.PositiveIntegerField(default=0, help_text='Total estimated duration in hours')),
                ('total_lectures', models.PositiveIntegerField(default=0)),
                ('total_resources', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('meta_keywords', models.CharField(blank=True, max_length=255)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0, help_text='Average completion rate percentage', max_digits=5)),
                ('has_certificate', models.BooleanField(default=True)),
                ('has_lifetime_access', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('co_instructors', models.ManyToManyField(blank=True, related_name='co_instructed_courses', to='teachers.teacher')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_courses', to='teachers.teacher')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='cours.coursecategory')),
                ('tags', models.ManyToManyField(blank=True, related_name='courses', to='cours.coursetag')),
            ],
            options={
                'db_table': 'cms_courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coupon_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Maximum number of uses (null = unlimited)', null=True)),
                ('current_uses', models.PositiveIntegerField(default=0)),
                ('max_uses_per_user', models.PositiveIntegerField(default=1, help_text='Maximum uses per user')),
                ('minimum_purchase_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('course', models.ForeignKey(blank=True, help_text='Specific course (null = all courses)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='cours.course')),
            ],
            options={
                'db_table': 'cms_course_discounts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Sync'), ('synced', 'Synced'), ('failed', 'Sync Failed')], default='draft', max_length=20)),
                ('backend_id', models.PositiveIntegerField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_error', models.TextField(blank=True)),
                ('lesson_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title_en', models.CharField(max_length=200)),
                ('title_fr', models.CharField(max_length=200)),
                ('title_es', models.CharField(max_length=200)),
                ('title_nl', models.CharField(max_length=200)),
                ('description_en', models.TextField(blank=True)),
                ('description_fr', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_nl', models.TextField(blank=True)),
                ('lesson_type', models.CharField(choices=[('video', 'üé• Video'), ('text', 'üìÑ Article/Text'), ('quiz', '‚ùì Quiz'), ('exercise', '‚úèÔ∏è Exercise'), ('coding', 'üíª Coding Exercise'), ('project', 'üöÄ Project'), ('discussion', 'üí¨ Discussion'), ('live', 'üì° Live Session'), ('assignment', 'üìù Assignment'), ('resource', 'üìé Downloadable Resource')], default='video', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Can be previewed before enrollment')),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Lesson duration in minutes')),
                ('video_url', models.URLField(blank=True, help_text='Video URL (YouTube, Vimeo, etc.)')),
                ('video_file', models.FileField(blank=True, upload_to='courses/videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov'])])),
                ('is_completable', models.BooleanField(default=True, help_text='Can be marked as complete')),
                ('requires_previous', models.BooleanField(default=True, help_text='Requires previous lessons to be completed')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='cours.course')),
            ],
            options={
                'db_table': 'cms_course_lessons',
                'ordering': ['course', 'section', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CoursePricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pricing_type', models.CharField(choices=[('free', 'Free'), ('paid', 'Paid'), ('subscription', 'Subscription')], default='paid', max_length=20)),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound')], default='EUR', max_length=3)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price before discount', max_digits=10, null=True)),
                ('has_discount', models.BooleanField(default=False)),
                ('discount_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_start_date', models.DateTimeField(blank=True, null=True)),
                ('discount_end_date', models.DateTimeField(blank=True, null=True)),
                ('subscription_period_days', models.PositiveIntegerField(default=30, help_text='Subscription period in days')),
                ('has_trial', models.BooleanField(default=False)),
                ('trial_period_days', models.PositiveIntegerField(default=7)),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pricing', to='cours.course')),
            ],
            options={
                'db_table': 'cms_course_pricing',
            },
        ),
        migrations.CreateModel(
            name='CourseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('five_star_count', models.PositiveIntegerField(default=0)),
                ('four_star_count', models.PositiveIntegerField(default=0)),
                ('three_star_count', models.PositiveIntegerField(default=0)),
                ('two_star_count', models.PositiveIntegerField(default=0)),
                ('one_star_count', models.PositiveIntegerField(default=0)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating_distribution', to='cours.course')),
            ],
            options={
                'db_table': 'cms_course_ratings',
            },
        ),
        migrations.CreateModel(
            name='CourseResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('pdf', 'üìë PDF Document'), ('doc', 'üìÑ Document'), ('video', 'üé• Video'), ('audio', 'üéµ Audio'), ('code', 'üíª Source Code'), ('image', 'üñºÔ∏è Image'), ('archive', 'üì¶ Archive (ZIP)'), ('link', 'üîó External Link'), ('ebook', 'üìö E-book'), ('worksheet', 'üìù Worksheet'), ('slides', 'üìä Presentation'), ('other', 'üìé Other')], max_length=20)),
                ('file', models.FileField(blank=True, upload_to='courses/resources/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'zip', 'rar', 'mp3', 'mp4', 'jpg', 'jpeg', 'png', 'txt', 'csv', 'json', 'xml', 'py', 'js', 'html', 'css'])])),
                ('external_link', models.URLField(blank=True)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('file_extension', models.CharField(blank=True, max_length=10)),
                ('is_downloadable', models.BooleanField(default=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Available before enrollment')),
                ('requires_completion', models.BooleanField(default=False, help_text='Requires lesson/course completion')),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('order', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='cours.course')),
                ('lesson', models.ForeignKey(blank=True, help_text='Optional: attach to specific lesson', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='cours.courselesson')),
            ],
            options={
                'db_table': 'cms_course_resources',
                'ordering': ['course', 'lesson', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Sync'), ('synced', 'Synced'), ('failed', 'Sync Failed')], default='draft', max_length=20)),
                ('backend_id', models.PositiveIntegerField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_error', models.TextField(blank=True)),
                ('title_en', models.CharField(max_length=200)),
                ('title_fr', models.CharField(max_length=200)),
                ('title_es', models.CharField(max_length=200)),
                ('title_nl', models.CharField(max_length=200)),
                ('description_en', models.TextField(blank=True)),
                ('description_fr', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_nl', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('learning_objectives', models.JSONField(default=list, help_text='What students will learn in this section')),
                ('estimated_duration_minutes', models.PositiveIntegerField(default=0, help_text='Estimated time to complete this section')),
                ('lesson_count', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='cours.course')),
            ],
            options={
                'db_table': 'cms_course_sections',
                'ordering': ['course', 'order'],
                'unique_together': {('course', 'order')},
            },
        ),
        migrations.AddField(
            model_name='courselesson',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='cours.coursesection'),
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', '‚úÖ Active'), ('completed', 'üéì Completed'), ('expired', '‚è∞ Expired'), ('suspended', 'üö´ Suspended')], default='active', max_length=20)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Course completion percentage', max_digits=5)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_issued_at', models.DateTimeField(blank=True, null=True)),
                ('has_lifetime_access', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='cours.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_enrollments', to=settings.AUTH_USER_MODEL)),
                ('completed_lessons', models.ManyToManyField(blank=True, related_name='completed_by', to='cours.courselesson')),
            ],
            options={
                'db_table': 'cms_course_enrollments',
                'ordering': ['-enrolled_at'],
                'indexes': [models.Index(fields=['student', 'status'], name='cms_course__student_6f08d0_idx'), models.Index(fields=['course', 'status'], name='cms_course__course__f8104f_idx')],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Sync'), ('synced', 'Synced'), ('failed', 'Sync Failed')], default='draft', max_length=20)),
                ('backend_id', models.PositiveIntegerField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_error', models.TextField(blank=True)),
                ('content_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content_type', models.CharField(choices=[('text', 'üìÑ Rich Text'), ('video', 'üé• Video'), ('audio', 'üéµ Audio'), ('image', 'üñºÔ∏è Image'), ('pdf', 'üìë PDF Document'), ('code', 'üíª Code Block'), ('quiz', '‚ùì Quiz'), ('exercise', '‚úèÔ∏è Interactive Exercise'), ('embed', 'üîó Embedded Content'), ('file', 'üìé File Download')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('content_data', models.JSONField(default=dict, help_text='Content data structure varies by type')),
                ('text_content', models.TextField(blank=True)),
                ('media_file', models.FileField(blank=True, upload_to='courses/content/')),
                ('media_url', models.URLField(blank=True)),
                ('duration_seconds', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='cours.courselesson')),
            ],
            options={
                'db_table': 'cms_course_content',
                'ordering': ['lesson', 'order'],
                'unique_together': {('lesson', 'order')},
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('review', models.TextField()),
                ('content_quality', models.PositiveIntegerField(blank=True, help_text='Quality of course content', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('instructor_quality', models.PositiveIntegerField(blank=True, help_text='Instructor teaching quality', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money', models.PositiveIntegerField(blank=True, help_text='Value for money', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_published', models.BooleanField(default=True)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('report_count', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='cours.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'cms_course_reviews',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['course', 'is_published'], name='cms_course__course__930b48_idx'), models.Index(fields=['student'], name='cms_course__student_58289a_idx')],
                'unique_together': {('course', 'student')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='courselesson',
            unique_together={('section', 'order')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='cms_courses_slug_dd9743_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['teacher', 'status'], name='cms_courses_teacher_48e913_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['category', 'is_published'], name='cms_courses_categor_7c23ec_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['-created_at'], name='cms_courses_created_d36fcd_idx'),
        ),
    ]
