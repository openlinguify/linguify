{
  "permissions": {
    "allow": [
      "*",
      "Bash(find:*)",
      "Bash(python3 manage.py check:*)",
      "Bash(grep:*)",
      "Bash(python3:*)",
      "Bash(rm:*)",
      "Bash(python test_fixed_endpoint.py:*)",
      "Bash(rg:*)",
      "Bash(poetry run python manage.py showmigrations:*)",
      "Bash(poetry run python manage.py migrate:*)",
      "Bash(poetry run python manage.py dbshell:*)",
      "Bash(poetry run:*)",
      "Bash(poetry remove:*)",
      "Bash(poetry add:*)",
      "Bash(python:*)",
      "Bash(mv:*)",
      "Bash(npm run dev:*)",
      "Bash(npm install:*)",
      "Bash(poetry install:*)",
      "Bash(powershell.exe:*)",
      "Bash(ls:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(source:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(touch:*)",
      "Bash(./venv/Scripts/python.exe manage.py runserver:*)",
      "Bash(./linguify-bin scaffold:*)",
      "Bash(chmod:*)",
      "Bash(echo:*)",
      "Bash(./stop.sh:*)",
      "Bash(timeout:*)",
      "Bash(poetry show:*)",
      "Bash(./run.sh:*)",
      "Bash(mkdir:*)",
      "Bash(poetry env info:*)",
      "Bash(pkill:*)",
      "Bash(./clean-next.sh:*)",
      "Bash(bash:*)",
      "Bash(cp:*)",
      "Bash(node test-imports.js)",
      "Bash(true)",
      "Bash(cmd.exe:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(npx eslint:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)",
      "Bash(npm run lint)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(copy /mnt/c/Users/louis/WebstormProjects/linguify/frontend/src/app/\\(dashboard\\)/page.optimized.tsx /mnt/c/Users/louis/WebstormProjects/linguify/frontend/src/app/\\(dashboard\\)/page.tsx)",
      "Bash(npm start)",
      "Bash(npm run:*)",
      "Bash(gettext:*)",
      "Bash(msgfmt:*)",
      "Bash(wget:*)",
      "Bash(pip show:*)",
      "Bash(pip3 show:*)",
      "Bash(./venv/Scripts/python.exe test_email_rejection.py:*)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications -v 2 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications.StatusNotificationTests.test_rejected_email_no_status_badge -v 2 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications -v 1 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests -v 2 --settings=core.settings_test)",
      "Bash(poetry search:*)",
      "Bash(poetry update:*)",
      "Bash(git stash:*)",
      "Bash(venv/Scripts/python.exe manage.py shell -c \"\nfrom public_web.utils import manifest_parser\n# Vider le cache du manifest parser\nmanifest_parser.clear_cache()\n# Récupérer les apps publiques\napps = manifest_parser.get_public_apps()\nprint('Apps publiques après nettoyage:')\nfor app in apps:\n    print(f'Slug: {app[\\\"slug\\\"]}, Name: {app[\\\"name\\\"]}, Route: {app[\\\"route\\\"]}')\n\")",
      "Bash(venv/Scripts/python.exe manage.py:*)",
      "Bash(sudo -u postgres:*)",
      "Bash(export_clean_data.py )",
      "Bash(export_production_data.py )",
      "Bash(export_production_data_simple.py )",
      "Bash(export_simple_data.py )",
      "Bash(export_without_notifications.py )",
      "Bash(final_import_only.py )",
      "Bash(full_database_copy.py )",
      "Bash(import_clean_data.py )",
      "Bash(import_data_simple.py )",
      "Bash(import_essential_data.py )",
      "Bash(import_final_data.py )",
      "Bash(import_production_data.py )",
      "Bash(import_production_data_simple.py )",
      "Bash(import_simple_data.py )",
      "Bash(import_supabase_safe.ps1 )",
      "Bash(import_from_supabase.ps1 )",
      "Bash(import_from_supabase.sh )",
      "Bash(copy_all_supabase_data.py )",
      "Bash(copy_missing_data.py )",
      "Bash(clean_and_import.py )",
      "Bash(check_data_counts.py )",
      "Bash(setup_postgresql.sh)",
      "Bash(all_production_data.json )",
      "Bash(clean_and_import.py )",
      "Bash(copy_all_supabase_data.py )",
      "Bash(copy_missing_data.py )",
      "Bash(direct_sql_import.sql )",
      "Bash(export_clean_data.py )",
      "Bash(export_production_data.py )",
      "Bash(export_production_data_simple.py )",
      "Bash(export_simple_data.py )",
      "Bash(export_without_notifications.py )",
      "Bash(final_import_only.py )",
      "Bash(full_database_copy.py )",
      "Bash(import_clean_data.py )",
      "Bash(import_data_simple.py )",
      "Bash(import_essential_data.py )",
      "Bash(import_final_data.py )",
      "Bash(import_from_supabase.ps1 )",
      "Bash(import_from_supabase.sh )",
      "Bash(import_production_data.py )",
      "Bash(import_production_data_simple.py )",
      "Bash(import_simple_data.py )",
      "Bash(import_supabase_safe.ps1 )",
      "Bash(production_data.json )",
      "Bash(production_simple.json )",
      "Bash(test_dynamic_system.ps1 )",
      "Bash(test_dynamic_system.sh )",
      "Bash(test_fixes.ps1 )",
      "Bash(test_jobs_debug.py )",
      "Bash(test_new_architecture.py )",
      "Bash(test_seo_urls.py )",
      "Bash(test_settings.html)",
      "Bash(make:*)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys, django\nsys.path.append('.')\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\ndjango.setup()\nfrom app_manager.models import App\nprint('📋 Applications disponibles en production:')\nfor app in App.objects.all():\n    print(f'  - {app.display_name} (code: {app.code})')\nprint(f'Total: {App.objects.count()} applications')\n\")",
      "Bash(sudo service:*)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys\nsys.path.append('.')\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\nimport django\ndjango.setup()\nfrom course.models import Lesson, TheoryContent\nprint(f'Production - Lessons: {Lesson.objects.count()}, Theory: {TheoryContent.objects.count()}')\n\")",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(DJANGO_ENV=production poetry run python scripts/database/app_manager.py list)",
      "Bash(DJANGO_ENV=production poetry run python scripts/database/manifest_manager.py apply-manifest)",
      "Bash(CI=true GITHUB_ACTIONS=true poetry run python manage.py test tests apps.authentication.tests --settings=core.settings_test --keepdb --verbosity=1 --pattern=\"test_*.py\")",
      "Bash(DJANGO_ENV=production poetry run python manage.py loaddata /tmp/debug_export.json)",
      "Bash(convert:*)",
      "Bash(__NEW_LINE__ cp apps/chat/static/description/icon.png static/app-icons/chat.png)",
      "Bash(poetry:*)",
      "Bash(export:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_views.PublicWebViewsTest.test_legacy_app_views_still_work --verbosity=2 --keepdb --noinput)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_views --verbosity=1 --keepdb --noinput)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_integration --verbosity=1 --keepdb --noinput)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nfrom core.views import get_preferred_language\nfrom django.test import RequestFactory\nfrom django.conf import settings\n\n# Test the improved language detection\nfactory = RequestFactory()\n\n# Test normal operation\nrequest = factory.get('/', HTTP_ACCEPT_LANGUAGE='fr,en;q=0.9')\nlang = get_preferred_language(request)\nprint(f'Normal operation: {lang}')\n\n# Test malformed header (should not crash)\nrequest = factory.get('/', HTTP_ACCEPT_LANGUAGE=';;invalid;;')\nlang = get_preferred_language(request)\nprint(f'Malformed header: {lang}')\n\n# Test empty header\nrequest = factory.get('/')\nlang = get_preferred_language(request)\nprint(f'No header: {lang}')\n\n# Test configuration\nprint(f'Supported languages: {[code for code, name in settings.LANGUAGES]}')\n\")",
      "Bash(for app in institutions courses students instructors assessments analytics content administration api)",
      "Bash(do)",
      "Bash(done)",
      "Bash(DJANGO_SETTINGS_MODULE=lms.settings poetry run python ../lms/setup_organizations.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/louis/WebstormProjects/linguify:$PYTHONPATH DJANGO_SETTINGS_MODULE=lms.settings poetry run python /mnt/c/Users/louis/WebstormProjects/linguify/lms/setup_organizations.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/louis/WebstormProjects/linguify:$PYTHONPATH DJANGO_SETTINGS_MODULE=lms.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.contrib.auth import authenticate\n\n# Test avec email\nprint(''=== Test authentification avec email ==='')\nuser1 = authenticate(username=''john.doe@stanford.edu'', password=''student123'')\nprint(f''Email auth result: {user1}'')\n\n# Test avec username\nprint(''=== Test authentification avec username ==='')\nuser2 = authenticate(username=''john.doe'', password=''student123'')\nprint(f''Username auth result: {user2}'')\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/louis/WebstormProjects/linguify:$PYTHONPATH DJANGO_SETTINGS_MODULE=lms.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom lms.apps.tenants.models import OrganizationUser, Organization\nfrom lms.apps.tenants.db_router import set_current_database, clear_current_database\n\nprint(''=== Nettoyage des utilisateurs dans les bases tenant ==='')\n\n# Vérifier les utilisateurs dans la base par défaut\nclear_current_database()\nmain_users = OrganizationUser.objects.all()\nprint(f''Utilisateurs dans la base principale: {main_users.count()}'')\nfor user in main_users:\n    print(f''  - {user.username}: {user.email}'')\n\nprint(''\\n=== Test authentification dans base principale ==='')\nfrom django.contrib.auth import authenticate\n\nuser = authenticate(username=''john.doe'', password=''student123'')\nprint(f''Authentification john.doe: {user}'')\n\nif user:\n    print(''✅ L\\''authentification fonctionne dans la base principale'')\nelse:\n    print(''❌ Problème d\\''authentification'')\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/louis/WebstormProjects/linguify:$PYTHONPATH DJANGO_SETTINGS_MODULE=lms.settings poetry run python manage.py migrate students)",
      "Bash(./venv/bin/python -c \"import django; print(''✅ Django'', django.get_version())\")",
      "Bash(kill:*)",
      "Bash(git checkout:*)",
      "Bash(./venv/bin/python:*)",
      "Bash(createdb:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_models --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_serializers --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_simple --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_learning_settings.LearningSettingsAPITest.test_update_card_progress --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_learning_viewsets.LearningSettingsViewSetTest.test_learning_settings_get_unauthorized --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_learning_viewsets.LearningSettingsViewSetTest.test_learning_settings_get_unauthenticated --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nfrom django.test import TestCase\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom django.urls import reverse\nfrom apps.revision.models import FlashcardDeck\n\nUser = get_user_model()\n\nclient = APIClient()\nuser = User.objects.create_user(username=''testuser'', email=''test@example.com'', password=''testpass123'')\ndeck = FlashcardDeck.objects.create(user=user, name=''Test Deck'')\n\nurl = reverse(''revision:deck-learning-settings'', args=[deck.id])\nresponse = client.get(url)\nprint(f''Status: {response.status_code}'')\nprint(f''Data: {response.data}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_learning_viewsets --verbosity=0)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test python -c \"\nimport django; django.setup()\nfrom django.contrib.auth.models import AnonymousUser\nfrom django.test import RequestFactory\nfrom rest_framework.test import APIRequestFactory\nfactory = APIRequestFactory()\nrequest = factory.get(''/test/'')\nprint(f''User: {request.user}'')\nprint(f''Is authenticated: {request.user.is_authenticated}'')\nprint(f''Type: {type(request.user)}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nimport django; django.setup()\nfrom django.contrib.auth.models import AnonymousUser\nfrom django.test import RequestFactory\nfrom rest_framework.test import APIRequestFactory\nfactory = APIRequestFactory()\nrequest = factory.get(''/test/'')\nprint(f''User: {request.user}'')\nprint(f''Is authenticated: {request.user.is_authenticated}'')\nprint(f''Type: {type(request.user)}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings python3 manage.py shell)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=\"louisloulou123 \" psql -h localhost -d db_linguify_dev -U \"postgres  \" -c \"ALTER TABLE course_lesson_progress ALTER COLUMN best_score SET DEFAULT 0;\")",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys, django\nsys.path.append(''.'')\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings'')\ndjango.setup()\nfrom app_manager.models import App\nprint(''📋 Applications en PRODUCTION:'')\nprint(''='' * 50)\nfor app in App.objects.all().order_by(''order'', ''display_name''):\n    visibility = ''✅ Visible'' if app.is_enabled else ''❌ Cachée''\n    installable = ''📦 Installable'' if app.installable else ''🚫 Non-installable''\n    print(f''{visibility} {app.display_name}'')\n    print(f''   Code: {app.code}'')\n    print(f''   État: {installable}'')\n    print(f''   Ordre: {app.order}'')\n    print()\nprint(f''Total: {App.objects.count()} applications'')\n\")",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys, django\nsys.path.append(''.'')\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings'')\ndjango.setup()\nfrom app_manager.models import App\n\nprint(''📋 Applications VISIBLES en PRODUCTION (état final):'')\nprint(''='' * 50)\nvisible_apps = App.objects.filter(is_enabled=True).order_by(''order'', ''display_name'')\nfor app in visible_apps:\n    print(f''✅ {app.display_name} (code: {app.code}) - Ordre: {app.order}'')\n\nif visible_apps.count() == 0:\n    print(''ℹ️  Aucune application visible - toutes sont en développement'')\n\nprint(f''\\n📊 Total applications visibles: {visible_apps.count()}'')\nhidden_apps = App.objects.filter(is_enabled=False).order_by(''display_name'')\nprint(f''📊 Total applications cachées: {hidden_apps.count()}'')\nprint(f''🔒 Apps cachées: {[app.display_name for app in hidden_apps]}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_integration.URLRoutingIntegrationTest.test_url_resolution --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_integration.URLRoutingIntegrationTest.test_url_resolution --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_integration --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_public_web_views --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_settings --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_settings --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_settings --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests apps.authentication.tests apps.quizz.tests apps.revision.tests --keepdb --verbosity=1)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_backend_basic --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.authentication.tests --keepdb --verbosity=1)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.authentication.tests.test_serializer_validation --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nimport os\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings_test'')\nimport django\ndjango.setup()\n\n# Test imports of all test files in authentication\ntest_files = [\n    ''apps.authentication.tests.test_profile_pictures'',\n    ''apps.authentication.tests.test_serializer_validation'',\n    ''apps.authentication.tests.test_account_management'',\n    ''apps.authentication.tests.test_settings_endpoints'',\n]\n\nfor test_file in test_files:\n    try:\n        __import__(test_file)\n        print(f''✅ {test_file} imports successfully'')\n    except Exception as e:\n        print(f''❌ {test_file} failed: {e}'')\n        \nprint(''\\n🚀 Testing Django test discovery...'')\nfrom django.test.runner import DiscoverRunner\nrunner = DiscoverRunner(verbosity=0)\ntry:\n    suite = runner.build_suite([''apps.authentication.tests''])\n    print(f''✅ Test discovery successful - found {suite.countTestCases()} test cases'')\nexcept Exception as e:\n    print(f''❌ Test discovery failed: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests tests.test_backend_basic tests.test_settings --keepdb --verbosity=1)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests apps.authentication.tests apps.quizz.tests apps.revision.tests --verbosity=2 --keepdb --settings=core.settings_test --pattern=\"test_*.py\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nimport os\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings_test'')\nimport django\ndjango.setup()\n\nfrom django.test.runner import DiscoverRunner\n\ntest_modules = [''tests'', ''apps.authentication.tests'', ''apps.quizz.tests'', ''apps.revision.tests'']\nrunner = DiscoverRunner(verbosity=0)\n\nfor module in test_modules:\n    try:\n        suite = runner.build_suite([module])\n        print(f''✅ {module}: {suite.countTestCases()} test cases found'')\n    except Exception as e:\n        print(f''❌ {module}: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_permissions.DeckPermissionTest.test_owner_can_view_private_deck --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_views_api.FlashcardDeckViewSetTest.test_deck_stats --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_permissions.AnonymousUserPermissionTest.test_anonymous_cannot_view_public_deck --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.authentication.tests.test_profile_pictures.ProfilePictureTestCase.test_save_processed_images --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_views_api.FlashcardDeckViewSetTest.test_deck_stats --keepdb --verbosity=1)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.quizz.tests.tests.QuizAPITests.test_list_quizzes --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.quizz.tests.tests.QuizAPITests.test_create_quiz --keepdb --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom app_manager.services import UserAppService\nprint(''✅ UserAppService import successful'')\n\")",
      "Bash(git pull:*)",
      "WebFetch(domain:docs.render.com)",
      "WebFetch(domain:render.com)",
      "Bash(./portal/venv/bin/python:*)",
      "Bash(# Test avec cookie de langue (simulation du sélecteur du header)\ncurl -s -I -H \"\"Accept-Language: es-ES,es;q=0.9\"\" -H \"\"Cookie: django_language=en\"\" http://localhost:8080/ | grep -E \"\"(HTTP|Location)\"\")",
      "Bash(node:*)",
      "Bash(/mnt/c/Users/louis/WebstormProjects/linguify/backend/venv/bin/python manage.py collectstatic --noinput)",
      "Bash(/mnt/c/Users/louis/WebstormProjects/linguify/backend/venv/bin/python manage.py check --deploy)",
      "Bash(/mnt/c/Users/louis/WebstormProjects/linguify/backend/venv/bin/python manage.py check)",
      "Bash(git check-ignore:*)",
      "Bash(git rm:*)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py showmigrations course)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py dbshell -c \"\\d course_chapter_progress\")",
      "Bash(PGPASSWORD=\"louisloulou123\" psql -h aws-0-eu-west-3.pooler.supabase.com -d postgres -U postgres.bfsxhrpyotstyhddkvrf -c \"\\d course_chapter_progress\")",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py makemigrations course --empty)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py migrate course)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py showmigrations revision)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py showmigrations revision)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py migrate revision 0015 --fake)",
      "Bash(DJANGO_ENV=\"production\" poetry run python manage.py migrate revision 0016)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings --verbosity=1)",
      "Bash(dropdb:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings --verbosity=1 --debug-mode)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.RevisionSettingsModelTest --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.RevisionSessionConfigTest.test_create_session_config --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardsAudioAPITest.test_audio_settings_serialization --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings --verbosity=0 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py migrate --verbosity=1)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.RevisionSettingsModelTest.test_get_audio_settings_method --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FrontendBackendIntegrationTest --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardAudioIntegrationTest --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardAudioIntegrationTest.test_real_world_scenario_french_feminine_setting --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardAudioIntegrationTest.test_flashcard_uses_correct_voice_gender_for_language --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.AudioSettingsPersistenceTest --verbosity=1 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardAudioIntegrationTest.test_different_languages_use_different_voice_genders --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.EnhancedAudioSettingsAPITest.test_audio_settings_endpoint_get --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.RevisionSettingsModelTest.test_clean_method_audio_speed_validation --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.authentication.tests.test_profile_pictures apps.revision.tests.test_settings --verbosity=0 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.FlashcardAudioIntegrationTest.test_french_female_voice_preference_applied_to_french_flashcards --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.VoiceParametersAPITest.test_voice_parameters_in_api_response --verbosity=2 --keepdb)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.revision.tests.test_settings.VoiceParametersAPITest.test_voice_settings_template_context --verbosity=2 --keepdb)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys, django\nsys.path.append(''.'')\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings'')\ndjango.setup()\nfrom app_manager.models import App\nprint(''📋 Toutes les applications (avec détails Chat):'')\nprint(''='' * 60)\nfor app in App.objects.all().order_by(''order'', ''display_name''):\n    visibility = ''✅ Visible'' if app.is_enabled else ''❌ Cachée''\n    installable = ''📦 Installable'' if app.installable else ''🚫 Non-installable''\n    print(f''{app.display_name} (code: {app.code})'')\n    print(f''   État: {visibility}, {installable}'')\n    print(f''   Ordre: {app.order}'')\n    if app.code == ''chat'':\n        print(f''   🔍 DÉTAILS CHAT:'')\n        print(f''      - is_enabled: {app.is_enabled}'')\n        print(f''      - installable: {app.installable}'')\n        print(f''      - order: {app.order}'')\n    print()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.community.models import Group, Profile\nfrom django.contrib.auth import get_user_model\nUser = get_user_model()\n\nprint(''=== État final des groupes ==='')\ngroups = Group.objects.all()\nfor group in groups:\n    print(f''Groupe {group.id}: {group.name}'')\n    print(f''  Créateur: {group.created_by.user.username}'')\n    print(f''  Modérateurs: {[m.user.username for m in group.moderators.all()]}'')\n    print(f''  Membres: {[m.user.username for m in group.members.all()]}'')\n    print(f''  URL gestion: http://localhost:8000/community/groups/{group.id}/manage/'')\n    print()\n\nprint(''📝 Si vous êtes connecté comme \"\"admin\"\", vous pouvez maintenant:'')\nprint(''   ✅ Gérer le groupe 1 et 2 et 3'')\nprint(''   ✅ Voir les boutons \"\"Manage\"\" dans tous les groupes'')\nprint(''   ✅ Promouvoir des modérateurs'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python manage.py makemigrations community --name add_group_avatar)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python manage.py migrate)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.community.models import Group\n\nprint(''=== Test Group Avatar Display ==='')\ngroups = Group.objects.all()\nfor group in groups:\n    print(f''Group: {group.name}'')\n    print(f''  Has avatar: {bool(group.avatar)}'')\n    if group.avatar:\n        print(f''  Avatar URL: {group.avatar.url}'')\n    else:\n        print(f''  Avatar: None'')\n    print()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.community.models import Group\n\nprint(''=== Available Groups ==='')\ngroups = Group.objects.all()\nfor group in groups:\n    print(f''ID: {group.id}, Name: {group.name}, Avatar: {bool(group.avatar)}'')\n    if group.avatar:\n        print(f''  Avatar URL: {group.avatar.url}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.community.models import Group\nfrom django.test import RequestFactory\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\nuser = User.objects.first()\n\n# Simuler une requête\nfrom apps.community.views.community_views import GroupDetailView\nview = GroupDetailView()\nview.request = RequestFactory().get(''/test/'')\nview.request.user = user\n\n# Tester le contexte\ngroup = Group.objects.get(id=17)\ncontext = view.get_context_data(group_id=17)\n\nprint(''=== Context Check ==='')\nprint(f''Group name: {context[\"\"group\"\"].name}'')\nprint(f''Group has avatar: {bool(context[\"\"group\"\"].avatar)}'')\nif context[''group''].avatar:\n    print(f''Avatar URL: {context[\"\"group\"\"].avatar.url}'')\n    print(f''Avatar path: {context[\"\"group\"\"].avatar.path}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python manage.py shell -c \"\nfrom django.test import Client\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\nclient = Client()\n\n# Login avec un utilisateur\nuser = User.objects.first()\nclient.force_login(user)\n\n# Test des pages des groupes\nresponse = client.get(''/community/groups/'')\nprint(f''Groups page - Status: {response.status_code}'')\n\nif response.status_code == 200:\n    print(''✅ Page des groupes fonctionne avec le nouveau template'')\nelse:\n    print(f''❌ Erreur sur la page des groupes: {response.status_code}'')\n    \n# Test de la page de détail d''un groupe\nresponse = client.get(''/community/groups/17/'')\nprint(f''Group detail page - Status: {response.status_code}'')\n\nif response.status_code == 200:\n    print(''✅ Page de détail du groupe fonctionne avec le nouveau template'')\nelse:\n    print(f''❌ Erreur sur la page de détail: {response.status_code}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.template.loader import render_to_string\nfrom apps.community.models import Group\n\n# Test de rendu du template groups.html\ntry:\n    context = {''groups'': Group.objects.all()[:3], ''my_groups'': []}\n    content = render_to_string(''community/group/groups.html'', context)\n    print(''✅ Template community/group/groups.html se rend correctement'')\n    print(f''Longueur du contenu: {len(content)} caractères'')\nexcept Exception as e:\n    print(f''❌ Erreur de rendu: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\n\n# Test d''import des vues\ntry:\n    from apps.community.views import GroupsView, GroupDetailView, GroupManageView\n    print(''✅ Import des vues de groupes réussi'')\n    \n    # Test d''import des fonctions\n    from apps.community.views import create_group, send_group_message, delete_group\n    print(''✅ Import des fonctions de groupes réussi'')\n    \n    # Test d''import des vues d''amis\n    from apps.community.views import CommunityMainView, FriendsListView, send_friend_request\n    print(''✅ Import des vues d\\''amis réussi'')\n    \n    print(''🎉 Toutes les imports fonctionnent correctement!'')\n    \nexcept Exception as e:\n    print(f''❌ Erreur d\\''import: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.template.loader import render_to_string\nfrom apps.community.models import Group\n\n# Test de rendu du template groups.html avec le nouveau chemin\ntry:\n    context = {''groups'': Group.objects.all()[:3], ''my_groups'': []}\n    content = render_to_string(''community/group/groups.html'', context)\n    print(''✅ Template community/group/groups.html se rend correctement après refactoring'')\n    print(f''Longueur du contenu: {len(content)} caractères'')\nexcept Exception as e:\n    print(f''❌ Erreur de rendu: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.authentication.models import User\n\n# Test de la méthode get_full_name\nuser = User.objects.first()\nprint(f''Utilisateur: {user.username}'')\nprint(f''First name: {user.first_name}'')\nprint(f''Last name: {user.last_name}'')\nprint(f''get_full_name(): {user.get_full_name()}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.authentication.models import User\nfrom apps.community.models import Profile\n\nprint(''=== Vérification des avatars utilisateurs ==='')\nusers = User.objects.all()\nfor user in users:\n    print(f''User: {user.username}'')\n    print(f''  Has profile_picture: {bool(user.profile_picture)}'')\n    if user.profile_picture:\n        print(f''  Profile picture URL: {user.profile_picture.url}'')\n    \n    # Vérifier le profil community\n    try:\n        profile = Profile.objects.get(user=user)\n        print(f''  Has community profile: True'')\n        print(f''  Has avatar: {bool(profile.avatar)}'')\n        if profile.avatar:\n            print(f''  Avatar URL: {profile.avatar.url}'')\n    except Profile.DoesNotExist:\n        print(f''  Has community profile: False'')\n    print()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.authentication.models import User\n\n# Test spécifique pour l''utilisateur admin\nuser = User.objects.get(username=''admin'')\nprint(f''Admin user:'')\nprint(f''  Username: {user.username}'')\nprint(f''  Has profile_picture: {bool(user.profile_picture)}'')\nif user.profile_picture:\n    print(f''  Profile picture URL: {user.profile_picture.url}'')\n    print(f''  Profile picture path: {user.profile_picture.path}'')\n    \n    # Vérifier si le fichier existe physiquement\n    import os\n    if os.path.exists(user.profile_picture.path):\n        print(f''  File exists: YES'')\n    else:\n        print(f''  File exists: NO'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.authentication.models import User\n\n# Vérifier l''utilisateur admin\nadmin_user = User.objects.get(username=''admin'')\nprint(f''Admin user: {admin_user.username}'')\nprint(f''Has profile_picture: {bool(admin_user.profile_picture)}'')\nif admin_user.profile_picture:\n    print(f''Profile picture URL: {admin_user.profile_picture.url}'')\n    print(f''Profile picture path: {admin_user.profile_picture.path}'')\n    \n    # Vérifier si le fichier existe physiquement\n    import os\n    if os.path.exists(admin_user.profile_picture.path):\n        print(f''File exists: YES'')\n    else:\n        print(f''File exists: NO - This is the problem!'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom apps.authentication.models import User\n\n# Corriger les chemins des photos de profil\nllalou_user = User.objects.get(username=''llalou'')\nllalou_user.profile_picture = ''1/optimized/042d81249a0d443d92ade5c33ecfccc9.png''\nllalou_user.save()\nprint(f''✅ Chemin corrigé pour {llalou_user.username}'')\n\ndarkvador_user = User.objects.get(username=''DarkVador'')\ndarkvador_user.profile_picture = ''1/optimized/042d81249a0d443d92ade5c33ecfccc9.png''\ndarkvador_user.save()\nprint(f''✅ Chemin corrigé pour {darkvador_user.username}'')\n\nprint(''\\n=== Vérification après correction ==='')\nfor user in [llalou_user, darkvador_user]:\n    print(f''User: {user.username}'')\n    print(f''  Profile picture URL: {user.profile_picture.url}'')\n    \n    # Vérifier si le fichier existe\n    import os\n    if os.path.exists(user.profile_picture.path):\n        print(f''  File exists: YES ✅'')\n    else:\n        print(f''  File exists: NO ❌'')\n        print(f''  Looking for: {user.profile_picture.path}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python test_drag_drop_models.py)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test tests.test_drag_drop --verbosity=1)",
      "Bash(PGPASSWORD=\"louisloulou123\" psql -h localhost -d postgres -U postgres -c \"DROP DATABASE IF EXISTS test_linguify_temp;\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.test import Client\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nimport json\n\nUser = get_user_model()\nclient = Client()\n\n# Créer un utilisateur de test\nuser = User.objects.create_user(username=''test_api'', email=''test@example.com'', password=''test123'')\nclient.force_login(user)\n\n# Tester l''API save_app_order\nprint(''🧪 Test de l\\''API save_app_order'')\nurl = reverse(''saas_web:save_app_order'')\nprint(f''URL: {url}'')\n\n# Test avec des données valides\ndata = {''app_order'': [''Community'', ''Teaching'', ''Quiz'']}\nresponse = client.post(url, data=json.dumps(data), content_type=''application/json'')\nprint(f''Status: {response.status_code}'')\nprint(f''Response: {response.content.decode()}'')\n\n# Vérifier la sauvegarde\nfrom app_manager.models import UserAppSettings\ntry:\n    user_settings = UserAppSettings.objects.get(user=user)\n    print(f''Ordre sauvegardé: {user_settings.app_order}'')\nexcept UserAppSettings.DoesNotExist:\n    print(''Settings non trouvés - création automatique'')\n\nprint(''✅ Test API terminé'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom saas_web.views.dashboard import test_drag_drop\nfrom django.test import RequestFactory\nfrom django.contrib.auth import get_user_model\n\nprint(''🧪 Test de la fonction test_drag_drop'')\nprint(''='' * 40)\n\nUser = get_user_model()\nuser = User.objects.first()\n\nfactory = RequestFactory()\nrequest = factory.get(''/test-drag-drop/'')\nrequest.user = user\n\n# Tester la fonction\ntry:\n    response = test_drag_drop(request)\n    print(f''✅ Status code: {response.status_code}'')\n    print(f''✅ Content type: {response.get(\"\"Content-Type\"\", \"\"text/html\"\")}'')\n    print(f''✅ Content length: {len(response.content)} bytes'')\n    print(''✅ Test drag drop function works!'')\nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test saas_web.tests.test_drag_drop --verbosity=2)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.contrib.auth import get_user_model\nfrom app_manager.models import App, UserAppSettings\nfrom app_manager.services import UserAppService\nimport uuid\n\nUser = get_user_model()\n\nprint(''🧪 TEST FINAL AVEC UTILISATEURS EXISTANTS'')\nprint(''='' * 50)\n\n# Utiliser un utilisateur existant ou en créer un nouveau avec email unique\ntry:\n    user = User.objects.filter(username__startswith=''test_'').first()\n    if not user:\n        unique_email = f''test_{uuid.uuid4().hex[:8]}@example.com''\n        user = User.objects.create_user(\n            username=f''test_{uuid.uuid4().hex[:8]}'',\n            email=unique_email,\n            password=''testpass123''\n        )\n        print(f''✅ Nouvel utilisateur créé: {user.username}'')\n    else:\n        print(f''✅ Utilisateur existant utilisé: {user.username}'')\n    \n    # Obtenir ou créer les settings utilisateur\n    user_settings = UserAppService.get_or_create_user_settings(user)\n    print(f''✅ Settings utilisateur: OK'')\n    \n    # Vérifier les apps activées\n    enabled_apps = user_settings.enabled_apps.all()\n    print(f''✅ Apps activées: {enabled_apps.count()}'')\n    \n    if enabled_apps.count() >= 2:\n        app_names = [app.display_name for app in enabled_apps]\n        print(f''   Apps disponibles: {app_names}'')\n        \n        # TEST 1: Mise à jour d''ordre\n        print(''\\n🔍 TEST 1: Mise à jour d\\''ordre'')\n        original_order = list(app_names)\n        new_order = list(reversed(app_names))\n        \n        success = user_settings.update_app_order(new_order)\n        print(f''   Ordre original: {original_order}'')\n        print(f''   Nouvel ordre: {new_order}'')\n        print(f''   ✅ Mise à jour réussie: {success}'')\n        \n        # TEST 2: Vérification persistence\n        print(''\\n🔍 TEST 2: Vérification persistence'')\n        user_settings.refresh_from_db()\n        saved_order = user_settings.app_order\n        print(f''   Ordre sauvegardé: {saved_order}'')\n        print(f''   ✅ Correspondance: {saved_order == new_order}'')\n        \n        # TEST 3: Récupération ordonnée\n        print(''\\n🔍 TEST 3: Récupération ordonnée'')\n        ordered_apps = user_settings.get_ordered_enabled_apps()\n        result_names = [app.display_name for app in ordered_apps]\n        print(f''   Apps ordonnées: {result_names}'')\n        print(f''   ✅ Ordre correct: {result_names == new_order}'')\n        \n        # TEST 4: Service UserAppService\n        print(''\\n🔍 TEST 4: Service UserAppService'')\n        installed_apps = UserAppService.get_user_installed_apps(user)\n        service_names = [app[''display_name''] for app in installed_apps]\n        print(f''   Apps du service: {service_names}'')\n        print(f''   ✅ Service OK: {len(installed_apps) > 0}'')\n        \n        # TEST 5: Structure des données\n        print(''\\n🔍 TEST 5: Structure des données'')\n        required_keys = [''display_name'', ''url'', ''icon'', ''name'']\n        all_keys_present = all(\n            all(key in app for key in required_keys) \n            for app in installed_apps\n        )\n        print(f''   Clés requises: {required_keys}'')\n        print(f''   ✅ Structure complète: {all_keys_present}'')\n        \n        print(f''\\n🎉 RÉSUMÉ FINAL:'')\n        print(f''   ✅ Mise à jour d\\''ordre: Fonctionnelle'')\n        print(f''   ✅ Persistence: Fonctionnelle'')\n        print(f''   ✅ Récupération ordonnée: Fonctionnelle'')\n        print(f''   ✅ Service UserAppService: Fonctionnel'')\n        print(f''   ✅ Structure des données: Complète'')\n        print(f''\\n🚀 DRAG & DROP SYSTEM: 100% VALIDÉ!'')\n        \n    else:\n        print(''❌ Pas assez d\\''apps activées pour tester'')\n        \nexcept Exception as e:\n    print(f''❌ Erreur: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python saas_web/tests/test_drag_drop_models.py)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python -c \"\nimport os\nimport django\nfrom django.test.utils import setup_test_environment, teardown_test_environment\nfrom django.test.runner import DiscoverRunner\n\n# Setup the test environment\nsetup_test_environment()\n\n# Import test classes\nfrom saas_web.tests.test_drag_drop import DragDropTestCase\n\n# Create a test instance and run specific tests\nimport unittest\nsuite = unittest.TestSuite()\nsuite.addTest(DragDropTestCase(''test_user_app_settings_creation''))\nsuite.addTest(DragDropTestCase(''test_app_order_update''))\n\nrunner = unittest.TextTestRunner(verbosity=2)\nprint(''Running specific drag & drop tests...'')\nresult = runner.run(suite)\nprint(f''Tests run: {result.testsRun}, Failures: {len(result.failures)}, Errors: {len(result.errors)}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom app_manager.models import App\n\nprint(''🔄 Synchronisation du nom de l\\''app todo...'')\n\n# Synchroniser à nouveau depuis le manifest\nresult = App.discover_apps_from_manifests()\n\n# Vérifier le nouveau nom\ntodo_app = App.objects.get(code=''todo'')\nprint(f''✅ Nom mis à jour: {todo_app.display_name}'')\n\n# Tester avec le service\nfrom app_manager.services.user_app_service import UserAppService\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\nuser = User.objects.first()\n\ninstalled_apps = UserAppService.get_user_installed_apps(user)\ntodo_apps = [app for app in installed_apps if app[''name''] == ''todo'']\n\nif todo_apps:\n    print(f''📱 Dans le dashboard: {todo_apps[0][\"\"display_name\"\"]}'')\nelse:\n    print(''❌ App non trouvée dans le dashboard'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python -c \"\nimport django\ndjango.setup()\nfrom django.contrib.auth import get_user_model\nfrom app_manager.views.app_manager_views import AppStoreView\nfrom django.test import RequestFactory\n\nUser = get_user_model()\nuser = User.objects.first()\n\n# Simuler une requête\nfactory = RequestFactory()\nrequest = factory.get(''/app-store/'')\nrequest.user = user\n\n# Obtenir le contexte\nview = AppStoreView()\nview.request = request\nresponse = view.get(request)\n\n# N''afficher que les apps todo et teaching pour diagnostic\napps_data = response.context_data[''apps'']\nfor app in apps_data:\n    if app[''name''] in [''todo'', ''teaching'']:\n        print(f''📱 {app[\"\"name\"\"]}:'')\n        print(f''   display_name: {app[\"\"display_name\"\"]}'')\n        print(f''   static_icon: {app[\"\"static_icon\"\"]}'')\n        print(f''   icon: {app[\"\"icon\"\"]}'')\n        print()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings poetry run python:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.calendar_app.tests.test_models --verbosity=1)",
      "Bash(ping:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings_test poetry run python manage.py test apps.notebook.tests.GlobalTagsIntegrationTest.test_note_can_use_global_tags --verbosity=2)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  },
  "enableAllProjectMcpServers": false
}